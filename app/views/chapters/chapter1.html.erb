<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#A Java Program">A Java Program</a></td><td><a href="#Variables">Variables</a></td><td><a href="#StringConcatenation">String Concatenation</a></td><td><a href="#TheEscapeCharacterandEscapeSequences">The Escape Character and Escape Sequences</a></td></tr>
		<tr><td><a href="#System.out">System.out.println() and System.out.print()</a></td><td><a href="#JavaReservedWords">Java Reserved Words</a></td><td><a href="#SyntaxErrors">Syntax Errors</a></a></td><td><a href="#AsciiArt">Ascii Art</a></td></tr>
		<tr><td colspan="2"><a href="#Worksheet">Worksheet 1: String Concatenation</a></td><td colspan="2"><a href="#AssignmentPrograms">Assignment Programs</a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 1 – Programming </h1>
  <p>
    Every computer has a microprocessor chip, which does most of the work.  The chip has lots of little wires so information can get in and out.  High and low voltages applied to the wires are seen as 1s and 0s by the processor.
  </p>
  <p style="text-align: center;"><%= image_tag "c1_p1.jpg"%></p>
  <p>
    Each 1 or 0 is called a bit, which stands for binary digit.  Sequences of bits are used to represent numbers within the processor.  For example, the sequence:
  </p>
  <P style="text-align: center;">
    <code>00001010</code>
  </P>
  <P>
    Might represent 10, and the sequence:
  </P>
  <p style="text-align: center;">
    <code>01111010</code>
  </p>
  <p>
    might represent 122.  This is how a computer stores numbers within a program.  The computer also uses numbers to represent memory addresses where values can be stored for later use.
  </p>
  <p>
    Bit combinations are interpreted as numbers when used to represent values or memory addresses where values are stored.
  </p>
  <p>
    Bit combinations are also used to represent instructions.  Each microprocessor chip has a set of instructions specific to its architecture.  For example, a particular microprocessor might have instructions such as those shown below.
  </p>
  <pre>
0100011	could mean    Store A in address B
1101011	could mean    Add numbers in address A and address B
1001001	could mean    Store last result in address A</pre>
  <p>
    In these examples, A is the first number following the instruction and B is the second.  Instructions and values are put together to form commands.  Some simplified examples are shown below.
  </p>
  <pre>
Instruction	  A	       B        
0100011    00001010  01111010  		store the number 10 at address 192 
1101011    00001010  01111010  		add the numbers at addresses 10 and 192
1001001    01111010  				      store the result at address 192</pre>
  <p>
    A program is a list of commands for a computer to follow.  A machine language program is written in binary, like the example above.  All programs must be in a binary format to run on a computer.  
  </p>
  <p>
    Obviously, writing entire programs in machine language is tedious work.  A high-level language, such as Java allows a programmer to write programs more conveniently.  Another program called a compiler must be used to convert the source code to machine language before the program can be run.
  </p>
  <p style="text-align: center;"><%= image_tag "c1_p2.jpg"%></p>
  <p>
    Source code is code that was typed by a programmer in a high level language like Java.  The compiler reads this file, and creates a new file containing executable code that the computer can run.  Once a program has been compiled into machine language, it will only run on a processor it was compiled for.  A program normally has to be compiled for each type of computer it will run on.
  </p>
  <p>
    Java programs are compiled to run on the Java Virtual Machine (JVM).  The JVM is an imaginary microprocessor with its own binary instruction set.  When we compile our Java programs, they are converted to run on this imaginary processor.  A compiled Java program is said to in bytecode format.  
  <br/>When we run a Java program, the JVM converts the Java bytecode into machine language for computer on which it is will run.
  </p>
  <p>
    The JVM is part of the Java Runtime Environment (JRE).  The JRE is needed to run Java programs.  The JRE contains the JVM and lots of compiled Java files.  This software is free, but most operating systems include it so you don't need to install it.  When your computer nags you about a Java update, it is trying to install the latest version of the JRE.  Since virtually all computers have a JVM, Java programs are platform independent.  A compiled Java program will run on any computer.
  </p>
  <p>
    To create new Java programs, a developer must install the Java Development Kit (JDK), which is also free and can be found at java.sun.com.  There are three editions of the JDK; Java Micro Edition (J2ME), Java Standard Edition (J2SE), and Java Enterprise Edition (J2EE).  We will be using the Standard Edition.  The JDK is a development kit.  Among other things, it contains a program that compiles Java source code.  
  </p>
  <p>
    The JDK includes the JRE, which includes the JVM.
  </p>
  <p style="text-align: center;"><%= image_tag "c1_p3.jpg"%></p>
  <h3>
    Example Program – Howdy
  </h3>
  <p>
    Using a text editor, type the following, and save the file as "Howdy.java".  
  </p>
  <pre>
public class Howdy
{
	public static void main(String[] args)
	{
		System.out.println("Howdy!");
	}
}</pre>
  <p>
    To compile the program, open a command prompt.  Navigate to the location of the file "Howdy.java", and type the following:
  </p>
  <pre>
javac Howdy.java</pre>
  <p>
    The javac program compiles the source code, and creates a new file called "Howdy.class".  To run the program, type:
  </p>
  <pre>
java Howdy</pre>
  <p style="text-align: center;"><%= image_tag "c1_p4.jpg"%></p>
  <p>
    Most people prefer to use an Integrated Development Environment (IDE) to edit code.  An IDE is a program that allows you to edit text, compile your program, and run your program from a single application.  IDE's often have additional features, such as color coded text and automatic formatting.
  </p>
  <p id="AJavaProgram">
    A Java Program
  </p>
  <p>
    For now, all of the Java programs we write will look like the figure below.
  </p>
  <pre>
public class <strong><em>AnyNameYouChoose</strong></em>
{
	public static void main(String[] args)
	{


                   <strong><em>Code You Write </strong></em>



	}
}</pre>
  <p>
    The first line says that this file defines a Java class, and that the class is public.  For now, that means that people are allowed to run the program.  Every program we write will start with the words "public class".  The next word will be the name of the class (the name of the program).  The name must start with a letter.  It can have numbers in it, as long as they are not the first character.  No other characters may be used.  By convention, we always start a class name with an uppercase letter.
  </p>
  <p style="text-align: center;color: red">
    <code>Common Error:  A class name can't have a space in it.</code>
  </p>
  <p>
    A Java file must be saved with the same name as the class contained within, and it must have the .java extension.  For example, the class Howdy must be saved in a file called "Howdy.java".
  </p>
  <p>
    The next line is very strange.
  </p>
  <pre >
public static void main(String[] args)</pre>
  <p>
    This is the beginning of the program's main() method definition.  Every program must have a place to start, and this line tells the JVM where.  We'll save an explanation of this line until later.  For now, every java program has this line.  Memorize it.
  </p>
  <p>
    Note that curly braces ({}) are used in the program.  An opening brace indicates the start of something, like a class or a method definition.  A corresponding closing brace must be used to end each opening brace.
  </p>
  <p>
    All of the code we write goes inside main(), which is inside the class.
  </p>
  <p style="text-align: center;"><%= image_tag "c1_p6.jpg"%></p>
  <p>
    When a program runs, it starts at the first line within main().  After it executes each line, it moves on to the next.  When there are no more lines to execute, the program ends.  So far, the only executable line we've seen is the method call:
  </p>
  <pre>
System.out.println("Howdy");</pre>
  <p>
    System.out.println() is a method.  That means it is a command you can use in a program.    Each time System.out.println() is encountered, the program prints text to the console.  
  </p>
  <p>
    A method call always uses parentheses.  We can put arguments within the parentheses to tell the method what to do.  The System.out.println() method takes one argument, which is the text you want to print.  The text must be surrounded by quotation marks.
  </p>
  <p>
    We can call the System.out.println() method repeatedly to print multiple lines of text.
  </p>
  <h3>
    Example Program – Camelot
  </h3>
  <pre>
public class Camelot
{
	public static void main(String[] args)
	{
		System.out.println("We're Knights of the round table");
		System.out.println("Our shows are formidable");
		System.out.println("But often times we're given rhymes");
		System.out.println("that are quite unsingable");
	}
}</pre>
  <p style="text-align: center;"><%= image_tag "c1_p7.jpg"%></p>
  <p>
    Although the computer runs one line of code at a time, the compiler does not see a line as we do.  Each method call ends with a semicolon, and the compiler sees this as the end of a line.  Whitespace characters that we add in, such as extra spaces, tabs, and newlines, are ignored by the compiler.  The program below would compile into the same executable file as the one above.  However, it is not as easy to read.
  </p>
  <pre style="color:red">
public    class     Camelot{public static 
void main(String[] args){
System.out.println("We're Knights of the round table")
;
   System.out.println("Our shows are formidable");System.out.println ("But often times we're given rhymes");
System.out.println("that are quite unsingable");}		}</pre>
  <h2 id="Variables">
    Variables
  </h2>
  <p>
    As mentioned above, The System.out.println() method will print the String inside its parentheses.  A String is a sequence of characters.  The text we've been surrounding with quotes is called a String constant.  A String constant is a specific sequence of characters, like:
  </p>
  <pre>
"We're knights of the round table"</pre>
  <p>
    A String variable is a name that stands for a String of text.
  </p>
  <pre>
String s = "We eat ham and jam and spam a lot";</pre>
  <p>
    The line of code above creates a new String variable called s.  The variable is set to the line "We eat ham and jam and spam a lot".  If we use this variable as the argument to System.out.println(), the method prints the line of text the variable is holding.
  </p>
  <pre>
System.out.println(s);</pre>
  <p>
    Note that the s is not surrounded by quotation marks.  If an argument to System.out.println() is enclosed in quotes, the exact text in the quotes is displayed.  If there are no quotes, the program looks for a variable with that name, and prints the text held by that variable.
  </p>
  <h3>
    Example Program – TextPrinter
  </h3>
  <pre>
public class TextPrinter
{
	public static void main(String[] args)
	{
		String s = "a line of text";
		String line2 = "another line of text";

		System.out.println(s);
		System.out.println(line2);
		System.out.println("s");
		System.out.println("line2");
	}
}</pre>
  <P>
    The first two calls to System.out.println() do not contain quotes.  The text stored in the variables is printed.  The second two calls have quotes around the variable names, so the names themselves are printed, rather than the variable values.
  </P>
  <P>
    Note that a variable name can be a single letter, or a whole word.  Like class names, a variable name can include numbers as long as the first character is a letter.  Spaces and other symbols are not allowed.  By convention, we always start variable names with a lowercase letter.
  </P>
  <p>
    A String variable is used to store text in a program.  For numbers, we use other types of variables.  An int variable is used to store an integer, or whole number.  A new int variable can be created and set to a value in much the same way as a String variable.
  </p>
  <pre>
int x = 5;</pre>
  <p >
    The line of code above creates a new <code>int</code> variable called <code>x</code>, and stores the number 5 in it.  If this variable is used as the argument to System.out.println(), 
  </p>
  <pre>
System.out.println(x);</pre>
  <p>
    The variable's value will be automatically converted to a String and printed.  Once again, if the variable name is surrounded by quotes, the variable name will be printed, rather than the variable value.
  </p>
  <h2 id="StringConcatenation">
    String Concatenation
  </h2>
  <p>
    Concatenation is a fancy word for joining.  There are times when we have two Strings, and we want to join them together into one string.  The plus (+) operator placed between two Strings will join them together into a single String.
  </p>
  <pre>
String part1 = "Between our quests we sequin vests";
String part2 = "and impersonate Clark Gable";

System.out.println(part1 + part2);</pre>
  <p>
    The code above creates two String variables.  The two Strings are joined together into a single String before they are printed to the console, causing the program to print the line:
  </p>
  <p>
    Between our quests we sequin vestsand impersonate Clark Gable
  </p>
  <p>
    Note the absence of a space between the two joined lines, because the first String has no space at the end, and the second has no space at the beginning.  If we want a space between two joined Strings, we need to put that in.
  </p>
  <pre>
System.out.println(part1 + " " + part2);</pre>
  <p>
    The line of code above joins three Strings together.  The space in the middle is a String constant, the other two parts are String variables.  Many Strings can be concatenated together in one statement.
  </p>
  <p>
    Number variables can also be concatenated to Strings using the concatenation operator.
  </p>
  <pre>
int x = 42;
System.out.println("The answer is " + x);</pre>
  <h3>
    Example Program – Concatenation
  </h3>
  <pre>
public class Concatenation
{
	public static void main(String[] args)
	{
		String product = "pie";
		int price = 5;

		System.out.println("A " + product + " is $" + price);
	}
}</pre>
  <p style="text-align: center;"><%= image_tag "c1_p10.jpg"%></p>
  <h3 id="TheEscapeCharacterandEscapeSequences">
    The Escape Character and Escape Sequences
  </h3>
  <p>
    You can use any letters, numbers, or symbols you like in a String.
  </p>
  <pre>
String nonsense = "@-_+';(:)*&^%$#!?.,{}[]|";</pre>
  <p>
    There are only two characters you can not use in a String.
  </p>
  <p>
    You can not use a quotation mark (") in a String because it will signal the end of the String.  The compiler will see the rest of the String as garbage and complain.
  </p>
  <pre>
String bad = "some text " looks like garbage";</pre>
  <p>
    The other character that can not be used normally is the backslash (\) because it is used as an escape character.  An escape character tells the compiler not to read and print the character normally, but to treat the next character as part of it.  An escape sequence is a combination of two or more characters that start with an escape character and are treated as a single character.
    <br/>For example, if we want to put a quotation mark in our String, we can use the \" escape sequence.  Similarly, if we want to put a backslash character in a String, we use \\.  The box below shows some of the Java escape sequences.
  </p>
  <table class="customers">
    <caption>Java Escape Sequences</caption>
    <tr><td>\"</td><td>Quotation mark</td></tr>
    <tr><td>\\</td><td>Backslash</td></tr>
    <tr><td>\n</td><td>Newline</td></tr>
    <tr><td>\t</td><td>Tab</td></tr>
    <tr><td>\b</td><td>Backspace</td></tr>
    <tr><td>\uxxxx</td><td>Unicode character</td></tr>
  </table>
  
  <p>
    The newline character moves the cursor to the beginning of the next line.  The next thing printed will begin there.  A tab advances the cursor to the next tab stop.  The backspace character moves the cursor back one character so that the next time something is printed, it will replace the current text.  The <code>\u</code> character lets us specify a Unicode character value, where the xxxx above is replaced by a Unicode value.  For example, 0007 is the Unicode value for the system beep.
  </p>
  <h3>
    Example Program - EscapeSequences
  </h3>
  <pre>
public class EscapeSequences
{
	public static void main(String[] args)
	{
		String quote = "Quoath the raven \"nevermore\"";
		String lines = "One fish\nTwo fish\nOld fish\nNew fish";
		String scores = "100\t95\t92\t100\t98";
		String path = "C:\\Courses\\Java\\Projects\\";
		String spell = "Mistakk\b\bke fixed";
		String beep = "Warning!!!\u0007";

		System.out.println(quote);
		System.out.println(lines);
		System.out.println(scores);
		System.out.println(path);
		System.out.println(spell);
		System.out.println(beep);
	}
}</pre>
  <p style="text-align: center;"><%= image_tag "c1_p11.jpg"%></p>
  <h2 id="System.out">
    System.out.println() and System.out.print()
  </h2>
  <p>
    There are two ways to print a String to the console.  The System.out.print() method prints the String, and leaves the cursor right after it.  The next String printed will continue on the same line.  The System.out.println() method adds a newline to the end of the String moving the cursor to the next line after printing.  The next String printed will start on this new line.
  </p>
  <pre>
public class Printing
{
	public static void main(String[] args)
	{
		String s1 = "One";
		String s2 = "Two";
		String s3 = "Three";

		System.out.print(s1);
		System.out.print(s2);
		System.out.print(s3);
		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s3);
	}
}</pre>
  <p style="text-align: center;"><%= image_tag "c1_p12.jpg"%></p>
  <h2 id="JavaReservedWords">
    Java Reserved Words
  </h2>
  <p>
    When choosing class names and variable names, there are certain words that are not allowed, such as "class" or "public".  These reserved words (or key words) words already have a specific meaning in Java
  </p>
	<table class="customers"> 
		<tr><td>abstract</td><td>char</td><td>else</td><td>goto</td><td>long</td><td>return</td><td>this</td><td>while</td></tr>
		<tr><td>assert</td><td>class</td><td>enum</td><td>if</td><td>native</td><td>short</td><td>throw</td><td></td></tr>
		<tr><td>boolean</td><td>const</td><td>extends</td><td>implements</td><td>new</td><td>static</td><td>throws</td><td></td></tr>
		<tr><td>break</td><td>continue</td><td>for</td><td>import</td><td>package</td><td>strictfp</td><td>transient</td><td></td></tr>
		<tr><td>byte</td><td>default </td><td>final</td><td>instanceof</td><td>private</td><td>super</td><td>try</td><td></td></tr>
		<tr><td>case</td><td>do</td><td>finally</td><td>int</td><td>protected</td><td>switch</td><td>void</td><td></td></tr>
		<tr><td>catch </td><td>double</td><td>float</td><td>interface</td><td>public</td><td>synchronized</td><td>volatile</td><td></td></tr>
	</table> 
	<h2 id="SyntaxErrors">
	  Syntax Errors
	</h2>
	<p>
	  When the compiler tries to compile a source file, it will complain if it finds an error.  The compiler can only catch certain types of errors called syntax errors, or compiler errors.  A syntax error occurs when a line does not follow the rules for the language.  For example, the following sentence does not use proper English syntax.
	</p>
	<p style="text-align: center;">
	  <code>in rained. Spain It are</code>
	</p>
	<p>
	  When the compiler encounters an error in syntax, it prints an error message.  Often, the compiler will report multiple errors when trying to compile.  Always fix the error at the top of the list first.  The earlier errors may be causing the later errors.
	</p>
  <p>
    Each error message is preceded by the file name and line number.  In the following example, an error was found in the file Syntax.java on line 6.  The error message states that a semicolon was expected and not found.
  </p>
  <p style="text-align: center;"><%= image_tag "c1_p13.jpg"%></p>
  <h3>
    Syntax Error Example 1
  </h3>
  <p>
    The sixth line is missing the semicolon at the end.
  </p>
  <pre>
public class Syntax
{
	public static void main(String[] args)
	{
		String s = "A String";
		<atrong>System.out.println(s)</strong>
	}
}</pre>
  <p>
    The compiler error says a semicolon was expected on line 6
  </p>
  <pre style = "color:red">
C:\projects\Syntax\Syntax.java:6: ';' expected
		System.out.println(s)
		                     ^
1 error
  
Tool completed with exit code 1</pre>
  <h3>
    Syntax Error Example 2
  </h3>
  <p>
    The opening parenthesis is missing on the fifth line.
  </p>
  <pre>
public class Syntax
{
	public static void main(String[] args)
	{
		<strong>System.out.println"A String");</strong>
	}
}</pre>
  <p>
    The compiler says line 5 is not a statement, and that a semicolon was expected.  Note that the compiler noticed that something was wrong on line 5, but did not know what.
  </p>
  <pre style = "color:red">
C:\projects\Syntax\Syntax.java:5: not a statement
		System.out.println"A String");
		          ^
C:\projects\Syntax\Syntax.java:5: ';' expected
		System.out.println"A String");
		                  ^
2 errors</pre>
  <h3>
    Syntax Error Example 3
  </h3>
  <p>
    The closing brace is missing on the sixth line.  
  </p>
  <Pre>
public class Syntax
{
	public static void main(String[] args)
	{
		System.out.println("A String");

}</Pre>
  <p>
    The compiler doesn't notice the error until line 7.  Sometimes the line given in an error message is several lines after the actual error.
  </p>
  <pre style = "color:red">
C:\projects\Syntax\Syntax.java:7: reached end of file while parsing
}
 ^
1 error</pre>
  <h3>
    Syntax Error Example 4
  </h3>
  <p>
    The word println is misspelled.
  </p>
  <pre>
public class Syntax
{
	public static void main(String[] args)
	{
		System.out.printLn("A String");
	}
}</pre>
  <p>
  The compiler doesn't recognize the symbol println because it is spelled wrong.  Java is case sensitive, so println and printLn are two different words.
  </p>
  <pre  style = "color:red">
C:\projects\Syntax\Syntax.java:5: cannot find symbol
symbol  : method printLn(java.lang.String)
		System.out.printLn("A String");
		          ^
1 error</pre>
  <h2 id="AsciiArt">
    Ascii Art
  </h2>
  <p>
    Ascii art refers to pictures drawn using text characters.  Don't forget to use escape sequences for backslashes and quotation marks (\\ and \").
  </p>
  <h3>
    Example Program - AsciiArt
  </h3>
  <pre>
public class AsciiArt
{
	public static void main(String[] args)
	{
		System.out.println(" _________________________________");
		System.out.println("|    ____   _____ ______________ |");
		System.out.println("|   / _  | / ___// ____/  _/  _/ |");
		System.out.println("|  / /_| | \\__ \\/ /    / / / /   |");
		System.out.println("| / /__| | __/ / /___ / / / /    |");
		System.out.println("|/_/   |_/____/\\____/___/___/    |");
		System.out.println("|         /\\__/\\                 |");
		System.out.println("|        (  - - )                |");
		System.out.println("|         \\  ^ /                 |");
		System.out.println("|          |   \\                 |");
		System.out.println("|          |    \\______          |");
		System.out.println("|          |  _    ---\\\\         |");
		System.out.println("|         (\"_| (\"_|    v         |");
		System.out.println("|WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW|");
		System.out.println("|================================|");
		System.out.println("|==========ASCII=================|");
		System.out.println("|=============KITTY==============|");
		System.out.println("|--------------------------------|");
	}
}</pre>
  <p style="text-align: center;"><%= image_tag "c1_p16.jpg"%></p>
  
<!-- ========Workshet and AssignmentPrograms================= -->  
<div id="Worksheet">
    <h3>Worksheet 1: String Concatenation</h3>
    <div class="code">
      int x = 5;<br/>
      int y = 2;<br/>
      int z = 7;<br/>
      String s1 = "five";<br/>
      String s2 = "x";<br/>
    </div>
    <br/>
      <ol>
        <li>What does the following statement print?
          <p>System.out.println("x equals " + x);</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println("there are " + s1 + " lights");</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println("Price = " + y + x + " dollars");</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println("x + " + " + " + y + "z");</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println(s1 + " + " + y + " + x");</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println("x – " + s2 + " is " + y);</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println("5 " + "by " + s1);</p>
        </li>
        <li>What does the following statement print?
          <p>System.out.println(s2 + x + "x" + "\"s1 + x \"" + s1);</p>
        </li>
      </ol>
</div>

<div id="AssignmentPrograms">
  <h3>Assignment Programs</h3>
  <h4>AsciiArt</h4>
  <br/>
  Write a program that prints an ascii art picture.  The picture must be at least 20 characters tall and 20 characters wide.
</div>

