<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#StringMethods">String Methods</a></td><td><a href="#StringMethodsGroupedByCategory">String Methods Grouped By Category</a></td><td><a href="#Worksheet11">Worksheet 11: String Methods</a></td><td><a href="#AssignmentPrograms">Assignment Programs</a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 9 - Strings</h1>
  <p>
  	The Java String <code>class</code> is used to store and manipulate character sequences.  The String class has many constructor methods.  Three commonly used constructors are given below.
  </p>
  <pre>
String()
String(String original)
String(char[] text)</pre>
<p>
	The first constructor creates a <code>new</code> empty String object.  There is a difference between a String object that contains no characters and a null pointer.  The second creates a <code>new</code> String object containing the same character sequence as the argument String, <code>original</code>.  The third constructor creates a <code>new</code> String object with the same character sequence as the <code>char</code> array <code>text</code>.
</p>
<p>A <code>new</code> String can also be created by assigning a String constant to the variable.</p>
<pre>String s = "Some text";</pre>
<p>
	This assignment statement allows <code>new</code> values to be assigned to a String as if it were a primitive data type.  But String is not a primitive data type.  The above is rewritten by the compiler.
</p>
<pre>s = new String("Some text");</pre>
<p>
	Because Strings are objects, they can not be compared for equality using the == operator.  The equals() method must be called on them.  The == operator would compare the object IDs of two Strings, not the character sequences.
</p>

<h2 id="StringMethods">
	String Methods
</h2>
<p>
	The String <code>class</code> contains many useful methods that can be called on String objects.  String methods do not alter the existing String object, but <code>return</code> a new String object, or information about the existing object.  Many of the String methods are overloaded.  The methods listed in this section are only some of those in the String <code>class</code>.
</p>

<h3>boolean equals(String s)</h3>

<p>
	We have already used the equals() method.  It <code>returns</code> a <code>boolean</code> value that is <code>true if</code> the argument String contains the same character sequence as the String object the method is called on.
</p>

<h3>boolean contains(String s)</h3>

<p>
	The contains() method takes a String argument.  The method <code>returns</code> a <code>boolean</code> value.  If the object the method is called on contains the argument String <code>s</code>, the return value is <code>true</code>.  Otherwise the method <code>returns false</code>.
</p>
<pre>
String sentence = "The rain in Spain";
String word = "in";
if(sentence.contains(word))
{
    System.out.println("The sentence contains the word in");
}</pre>
<p>
	Of course, the argument can be a String constant.  In fact, string methods can be called on String constants.  Once again, Strings are not primitive data types.  The code:
</p>
<pre>
"sentence"

is equivalent to:

new String("sentence");</pre>
<p>
	A <code>new</code> String object with no name is created.  So, the following will work, though it might not be particularly useful.
</p>
<pre>
if("The rain in Spain".contains("in"))
{
    System.out.println("The sentence contains the word in");
}</pre>

<h3>int length()</h3>
<p>
	The length() method has no arguments.  It <code>returns</code> the number of characters in the String it is called on.
</p>
<pre>
String word = "Zoidberg";
System.out.println(word + " has " + word.length() + " letters.");</pre>
<p>
	Note that the length() method is a method, and requires parentheses, even though it takes no arguments.  Don't confuse the String length() method with the length parameter used to get the length of an array, which does not use parentheses.
</p>

<h3>boolean equalsIgnoreCase(String s)</h3>
<p>
	The equalsIgnoreCase() method <code>returns true</code> if the object the method is called on has exactly the same text, not including case, as the String <code>s</code>.
</p>
<pre>
String string1 = "gigabytes";
String string2 = "GiGaByTeS";
if(string1.equalsIgnoreCase(string2))
{
	System.out.println("Close enough!");
}</pre>

<h3>String toLowerCase()</h3>
<p>
	The toLowerCase() method creates and <code>returns</code> a <code>new</code> String object with the same text as the String object the method is called on, but converts all the text to lower case.
</p>
<h3>String toUpperCase()</h3>
<p>
	The toUpperCase() method creates and <code>returns</code> a new String object with the same text as the String object the method is called on, but converts all the text to upper case.
</p>
<p>
	Since these methods <code>return</code> String objects, methods can be called on them.  The example below shows a complex use of the contains() method.  The statement converts both <code>sentence</code> and <code>word</code> to uppercase before checking the <code>sentence</code> for the <code>word</code>.  The contains() method is called on the String <code>returned</code> from the toUpperCase() method called on the String <code>sentence</code>.  The argument to the contains() method is the String object <code>returned</code> from the call to toUpperCase() on <code>word</code>.  
</p>
<pre>
String sentence = "The rain in Spain";
String word = "In";
if(<strong>sentence.toUpperCase().contains(word.toUpperCase())(</strong>)
{
    System.out.println("The sentence contains the word IN");
}</pre>

<h3>String trim()</h3>
<p>
	The trim() method creates and <code>returns</code> a new String object with the same text as the String object the method is called on, but removes white space (spaces, tabs, and newlines) from either end.
</p>
<pre>
String word = "        Rivendell        ";
String trimmedWord = word.trim();</pre>
<p>
	After the two statements above, the String <code>word</code> still contains spaces before and after Rivendell, but the String <code>trimmedWord</code> does not.
</p>
<pre>
word   &rarr;  	"        Rivendell        "
trimmedWord  &rarr; "Rivendell"</pre>
<h3>char charAt(int index);</h3>
<p>
	The charAt() methods <code>returns</code> one of the characters from the String object the method is called on.  The method requires one argument of type <code>int</code>, which represents the index of the desired character.  The first character of the String is at index 0, just as the first element of an array is at index 0.
</p>
<pre>
String word = "characters";
char letter = word.charAt(2);</pre>
<p>These statements assign the character 'a' to the <code>char</code> variable <code>letter</code>.</p>
<h3>
String substring(int beginIndex)<br/>
String substring(int beginIndex, int endIndex)
</h3>
<p>
	There are two versions of the substring() method.  Both methods create and <code>return</code> a <code>new</code> String object that contains only some of the characters in the String object the method is called on.  
</p>
<p>
	The first version only requires one argument, which specifies where in the String to start.  The method makes a copy of the original String starting at beginIndex, and ending at the end of the String. 
</p>
<p>
	The second version requires two arguments.  The first is the index of the first character to be included in the substring.  The second specifies the end of the substring.  All characters up to this index will be included, but the character at this index will not.
</p>
<pre>
String sentence = "It does say colonel on my uniform.";
String phrase = sentence.substring(3, 19);</pre>
<p>After the statements above, the String <code>phrase</code> holds the text, "does say colonel".</p>

<h3>
int indexOf(String substring)<br/>
int indexOf(String substring, int beginIndex)
</h3>

<p>
	There are two versions of the indexOf() method.  Both methods search for a substring in the String they are called on, and <code>return</code> the index where the substring is first found.  If the substring is not found within the String, the method returns -1.
</p>
<p>
	The first version searches the entire String for the substring.  If the substring is found, an integer is <code>returned</code> specifying the index in the String were the substring first appears.
</p>
<p>
	The second version searches only part of the String, starting at beginIndex.  It is common to use the first version to find the first occurrence of a substring, and to use the second version to find subsequent occurrences.
</p>
<p>
	The example code below searches for the word "in" using indexOf().  Once the word is found the first time, we use indexOf() to search the String again starting one character after the last place the word was found.  When indexOf() returns a value of -1, we know we've found all occurrences of our search word.
</p>
<pre>
String sentence = "The rain in Spain";
int index = sentence.indexOf("in");
System.out.println("Found it at index " + index);
index = sentence.indexOf("in", index + 1);
while(index != -1)
{
	System.out.println("Found it again at index " + index);
	index = sentence.indexOf("in", index + 1);
}</pre>
<h3>String[] split(String separator)</h3>
<p>
	The split() method separates a String into an array of Strings and returns this array.  The method takes one argument of type String.  This argument defines the separator that will be used to split the String into an array.  The String will be broken into substrings at each occurrence of the separator.  The separator is not included in any of the returned array elements. 
</p>
<p>
	In the example below, a String containing semicolons is created.  This String is then split into a String array using the semicolons as a separator.  Then the individual words are printed. 
</p>
<pre>
String sentence = "My;four;favorite;words";
String[] words = sentence.split(";");
for(int i = 0; i < words.length; i++)
{
	System.out.println(words[i]);
}</pre>
<h3>char[] toCharArray()</h3>
<p>
	The toCharArray() method creates a character array using the characters in the String object the method is called on.  The method creates and <code>returns</code> a new char array having the same length as the original String.  The method requires no arguments.
</p>
<p>
	In the example below, the String <code>word</code> is separated into individual characters, which are printed.
</p>
<pre>
String word = "Namarie";
char[] letters = word.toCharArray();
for(int i = 0; i < letters.length; i++)
{
	System.out.println(letters[i]);
}</pre>
<h3>String replaceAll(String original, String replacement)</h3>
<p>
	The replaceAll() method searches the String object the method is called on, and replaces all occurrences of the String <code>original</code> with the <code>String replacement</code>.  A <code>new</code> String object is created with the changes, and <code>returned</code> by the method.
</p>
<p>
	In the example below, a String is created with a spelling mistake.  The replaceAll() method is used to replace all occurrences of "wong" with "wrong".
</p>
<pre>
String line = "wong is spelled wong on this line";
System.out.println(line);
line = line.replaceAll("wong", "wrong");
System.out.println(line);</pre>

<h3>
boolean startsWith(String s)<br/>
boolean endsWith(String s)
</h3>
<p>
	The StartsWith() and endsWith() methods <code>return true</code> only if the String the method is called on starts with or ends with the String <code>s</code>.
</p>
<h2 id="StringMethodsGroupedByCategory">
	String Methods Grouped By Category
</h2>
<p>
	The methods below are used to compare two Strings.  Either of the String objects might contain a single character, a word, a sentence, or the text of an entire book.  Note that these methods all <code>return</code> a <code>boolean</code> value.
</p>
<pre>
boolean equals(String s)
boolean equalsIgnoreCase(String s)
boolean contains(String s)
boolean startsWith(String s)
boolean endsWith(String s)</pre>
<p>The methods below manipulate existing Strings in common ways.</p>
<pre>
String toLowerCase()
String toUpperCase()
String trim()
String replaceAll(String original, String replacement)</pre>
<p>
	The methods below get information about the String they are called on.  The indexOf() method is used to search Strings.
</p>
<pre>
int length()
int indexOf(String s)
int indexOf(String s, int index)</pre>
<p>
	The methods below can be used to pull a String apart.  A different method is chosen based on the type of data it breaks the String into. 
</p>
<pre>
char charAt(int index)
char[] toCharArray()
String substring(int beginIndex)
String substring(int beginIndex, int endIndex)
String[] split(String separator)</pre>
<p>
	Strings can be put together using the concatenation operator (+) to join Strings, or the String constructor to join a <code>char</code> array.
</p>
<pre>
String newString = oldString1 + oldString2;
String newString = new String(charArray);</pre>
<p>
	A combination of concatenation and the substring() method can be used to remove part of a String based on index value.  Below, the third character is removed.
</p>
<pre>
String newString = oldString.subString(0, 3) + oldString.subString(4) ;
String newString = oldString.subString(0, 3) + "@" + oldString.subString(4) ;</pre>
<h3>Example Program – StringTester </h3>
<p>
	The StringTester program asks the user to enter a sentence, and a word.  Then it uses String methods to search and process the Strings.
</p>
<pre>
import java.util.Scanner;

public class StringTester
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		String sentence;
		String word;
		int sentenceLength;
		int wordLength;

		System.out.println("Please enter a sentence.");
		sentence = keyboard.nextLine().trim();
		System.out.println("Thanks, now enter a word.");
		word = keyboard.nextLine().trim();

		System.out.println("\nYour sentence has " + sentence.length() + " letters");
		System.out.println("Your word has " + word.length() + " letters");

		System.out.println("\nConverting to lowercase...");
		sentence = sentence.toLowerCase();
		word = word.toLowerCase();
		System.out.println("Sentence = " + sentence);
		System.out.println("Word = " + word);

		if(sentence.contains(word))
		{
			System.out.println("\nYour sentence does contain " + word);
			System.out.println("It starts at character " + sentence.indexOf(word));
		}
		else
		{
			System.out.println("\nYour sentence does not contain " + word);
		}

		System.out.println("\nLet's break that sentence into an array of words.");
		String[] words = sentence.split(" ");
		for(int i = 0; i < words.length; i++)
		{
			if(words[i].equals(word))
			{
				System.out.println(words[i] + ": is " + word);
			}
			else
			{
				if(words[i].contains(word))
				{
					System.out.println(words[i] + ": contains " + word);
				}
				else
				{
					System.out.println(words[i] + ": does not contain " + word);
				}
			}
		}

		System.out.println("\nLet's mark those words in the original sentence.");
		sentence = sentence.replaceAll(word, word.toUpperCase());
		System.out.println(sentence);
	}
}</pre>
<p style="text-align: center;"><%= image_tag "c9_p9.jpg"%></p>
<h3>Example Propgram – PalendromeChecker</h3>
<p>
	The PalindromeChecker program checks for palindrome words.  A word is a palindrome if reversing it yields the same word.  The words noon and level are palindromes.
</p>
<p style="text-align: center;"><%= image_tag "c9_p9_02.jpg"%></p>
<pre>
import java.util.Scanner;

public class PalindromeChecker
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		String word;
		boolean palendrome = true;
		int length;

		System.out.print("Enter a word: ");
		word = keyboard.nextLine();
		length = word.length();


		<strong>// Using characters</strong>
		char c1;
		char c2;
		palendrome = true;
		for(int i = 0; i < length/2; i++)
		{
			c1 = word.charAt(i);
			c2 = word.charAt(length - i - 1);
			if(c1 != c2)
			{
				palendrome = false;
			}
		}
		if(palendrome)
		{
			System.out.println("Yup.  It's a palindrome.");
		}
		else
		{
			System.out.println("Nope.  Not a palindrome.");
		}
		
		<strong>// Using Strings</strong>
		String s1;
		String s2;
		palendrome = true;
		for(int i = 0; i < length/2; i++)
		{
			s1 = word.substring(i, i + 1);
			s2 = word.substring(length - i - 1, length - i);
			if(!s1.equals(s2))
			{
				palendrome = false;
			}
		}
		if(palendrome)
		{
			System.out.println("Still a palindrome.");
		}
		else
		{
			System.out.println("Still not a palindrome.");
		}
		
		<strong>// Using character arrays</strong>
		char[] a = word.toCharArray();
		palendrome = true;
		for(int i = 0; i < length/2; i++)
		{
			if(a[i] != a[length - i - 1])
			{
				palendrome = false;
			}
		}
		if(palendrome)
		{
			System.out.println("Still a palindrome.");
		}
		else
		{
			System.out.println("Still not a palindrome.");
		}
	}
}</pre>
<p>
	The program uses three different approaches to check the word.  The first approach uses the charAt() method and a <code>for</code> loop to step through the string both forward and backward.  
</p>
<p>
	In the first pass through the loop, one <code>char, c1,</code> is set to the first character in the String.  Another <code>char, c2,</code> is set to the last character in the String.  As <code>i</code> increases, <code>c1</code> steps up through the String while <code>c2</code> steps down.
</p>
<pre>
c1 = word.charAt(i);
c2 = word.charAt(length - i - 1);</pre>
<p>
	The variable, <code>length</code>, is set to the length of the word at the beginning of the program.  In any pass through the loop, if the corresponding characters are not the same, a <code>boolean</code>, palindrome, is set to <code>false</code>.
</p>
<pre>
if(c1 != c2)
{
	palendrome = false;
}</pre>
<p>
	Since the first half of the string is being compared to the last half, the <code>for</code> loop only needs to run for half the length of the word.
</p>
<pre>for(int i = 0; i < length/2; i++)</pre>
<p>
	The second approach uses the substring() method to represent one character of the String at a time as a String.
</p>
<pre>
s1 = word.substring(i, i + 1);
s2 = word.substring(length - i - 1, length - i);</pre>
<p>
	Since the substring() method with two arguments does not <code>return</code> the character at the ending index, if the second argument is one greater than the first argument, only the character at the beginning index will be returned.  The Strings are then compared using the equals() method.
</p>
<pre>
if(!s1.equals(s2))
{
	palendrome = false;
}</pre>
<p>
	The third approach uses the toCharArray() method to convert the String to an array of <code>chars</code>.  The elements are compared in a similar way as in the other two approaches.
</p>
<p>
	Notice that in the third approach new variables are not made to hold the characters as the loop steps through the String.  The same could be done for the first two approaches, but the code starts to become hard to read.
</p>
<pre>
if(word.charAt(i)!= word.charAt(length - i - 1))
{
	palendrome = false;
}

if(!word.substring(i, i + 1).equals(word.substring(length - i - 1, length - i)))
{
	palendrome = false;
}</pre>

<!-- ========Worksheet and AssignmentPrograms================= --> 
<div id="Worksheet11">
	<h3>Worksheet 11: String Methods</h3>
	<ol>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s3 = "So Elvis has left the building.";

s3.indexOf("u")
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int x = 7;
String s4 = "Ask me no questions and I'll tell you no lies ";

s4.substring(x, 15)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int z = 25;
int x = 2;
String s4 = "If you immediately know the candle light is fire";

s4.substring(x + 3, z - 3)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s2 = "Sharing is Caring";

s2.contains("i")
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String word = "bunnies";

"e".equals(word)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s4 = "Actions speak louder than words";

s4.substring(10).length()
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s1 = "Beam me up, Scotty";
String letter1 = "i";

s1.contains(letter1)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s3 = "All good things must come to an end";
String letter2 = "e";

s3.indexOf(letter2)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s4 = "I'll make him an offer he can't refuse.";
String s3 = "To be or not to be, that is the question.";

s3.charAt(s4.substring(5).substring(17).length())
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s3 = "I'm Sorry Dave.  I'm afraid I can't do that.";

s3.charAt(s3.indexOf("o") + 5)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s4 = "i am Roger the Shrubber";
String s3 = "I'll make him an offer he can't refuse.";
String letter2 = "a";

s4.charAt(s3.indexOf(letter2))
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s3 = "i am Roger the Shrubber";

s3.indexOf("a")
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s4 = "the Black Knight always triumphs!";

s4.contains("all")
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int x = 4;
String s3 = "She sells sea shells down by the sea shore";

s3.charAt(s3.substring(x).substring(18).length() + 3)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int x = 1;
String s4 = "Ask me no questions and I'll tell you no lies ";
String s3 = "To be or not to be, that is the question.";

s3.charAt(s4.substring(x, 12).length())
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
String s4 = "i am Roger the Shrubber";
String s3 = "By Grabthar's hammer!... what a savings";

s3.charAt(s4.indexOf("e"))
			</div>
		</li>
	</ol>
	
</div>

<div id="AssignmentPrograms">
	<h3>Assignment Programs</h3>
	<br/>
	<h4>PasswordChecker</h4>
	<p>
		This program tests a suggested password for acceptability following the rules:
		<br/>A password must have between 6 and 12 characters.
		<br/>A password must contain at least one lowercase letter.
		<br/>A password must contain at least one uppercase letter.
		<br/>A password must contain at least one digit (number).
	</p>
	<br/>
	<h4>RootMyText</h4>
	<p>
		This program asks the user to type a sentence.  It takes all of the digits in the sentence, takes the square root of each and adds them together.  Then it prints the whole number part to the console.
	</p>Sample run
	<div class="codeblock2">
Please enter a sentence.
<em>If you 8 what I 8 b4, you would go back to ba6 2.</em>
I’ve processed your sentence, and derived the number 11.
	</div>
	<br/>
	<h4>AnagramChecker</h4>
	<p>
		An anagram is a phrase made by rearranging the letters of another phrase.  Spaces punctuation and capitalization are ignored.  Examples are:
	</p>
	<p>
		Eleven plus two  and  Twelve plus one
		<br/>A decimal point  and  I'm a dot in place
	</p>
	<p>
		This program must accept two Strings and determine if they are anagrams of each other.
	</p>
	<br/>
	<h4>Hangman</h4>
	<p>
		This program contains ten eight-letter words for the user to guess at.  To make things simpler, you may choose ten words that have no redundant letters.  The program chooses one of these words and lets the user guess letters.  The user gets 15 guesses.  If the user guesses a letter that is in the word, that letter is filled in.
	</p>
	<p style="text-align: center;">----r---</p>
	<p>
		If the user gets all the letters within 15 guesses, they are given a congratulatory message.  If, after 15 guesses the word is not complete, the users is informed appropriately, and told what the word was.
	</p>Sample run
	<div class="codeblock2">
Welcome to Hangman!

I've picked an 8 letter word for you.
You have to guess all of the letters in the word.
You get 15 guesses.


--------

Choose a letter for guess 1
<strong>e</strong>

-----e--

Choose a letter for guess 2
<strong>t</strong>

-----e--

Choose a letter for guess 3
<strong>a</strong>

-----e--
...

Choose a letter for guess 14
<strong>b</strong>

-roblems

Choose a letter for guess 15
<strong>z</strong>

-roblems

Ha Ha You stink!  The word was problems
	</div>
	
</div>
