<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#Readability">Readability</a></td><td><a href="#FormattingandIndentation">Formatting and Indentation</a></td><td><a href="#VariableNames">Variable Names</a></td><td><a href="#Comments">Comments</a></td><td><a href="#CodeCramming">Code Cramming</a></td></tr>
		<tr><td><a href="#MagicNumbers">Magic Numbers</a></td><td><a href="#DuplicateCode">Duplicate Code</a></td><td><a href="#PromptingForInput">Prompting For Input</a></td><td><a href="#ProgramDesign">Program Design</a></td><td><a href="#Errors">Errors</a></td></tr>
		<tr><td><a href="#Exceptions">Exceptions</a></td><td><a href="#FlowDiagrams">Flow Diagrams</a></td><td><a href="#Worksheet6">Worksheet 6: Flow Diagrams</a></td><td colspan="2"><a href="#AssignmentPrograms">Assignment Programs</a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 4 - Programming Practices</h1>
	<h2 id="Readability">
		Readability
	</h2>
	<p>
		Readability is an important feature of every program.  It is much easier to find and correct programming errors if the program is easy to read.  The conventions covered in this section will not affect program performance, but nevertheless lead to better code.
	</p>
	
	<h2 id="FormattingandIndentation">
		Formatting and Indentation
	</h2>
	<p>
		Spaces are required in the Java language in certain places.  For example, in the line
	</p>
	<pre>
Scanner keyboard = new Scanner(System.in);	<strong>Correct</strong></pre>
	<p>
		A space is required between Scanner and keyboard so that the compiler knows they are separate words.  If the space is omitted, the compiler will see the word Scannerkeyboard, and it will not be recognized.
	</p>
	<pre>
Scannerkeyboard = new Scanner(System.in); 	<strong>Incorrect</strong></pre>
	<p>
		On the other hand, spaces are not required around operators, because these symbols can not be used as part of a variable name.
	</p>
	<pre>
x=keyboard.nextInt();				<strong>Correct</strong>
if(x>2&&x<10)</pre>
	<p>
		However, these lines are hard to read.  The use of spaces around operators is recommended.
	</p>
	<pre>
x = keyboard.nextInt();				<strong>Preferred</strong>
if(x > 2 && x < 10)</pre>
	<p>
		Although sometimes a space is required, extra whitespace is ignored by the Java compiler.  That includes spaces, tabs, and newlines.  Adding extra whitespace characters following the guidelines below will make your programs more clear.
	</p>
	<ul>
		<li>Start each program line/statement on a new line</li>
		<li>Use blank lines between program sections</li>
		<li>Line up brace pairs</li>
		<li>Always use Braces for if and else blocks</li>
		<li>Indent one tab for each brace level</li>
		<li>Use the same indentation within any specific brace level</li>
	</ul>
	<p>
		The two programs below are identical as far as the compiler is concerned.  The first program is very dense, but this will not make it run faster or use less memory.  It's just harder to read.  This gives programming errors places to hide.
	</p>
	<h3>
		Example 1 – Sloppy
	</h3>
	<pre style="color:red">
import java.util.Scanner;public class Favorites{
public static void main(String[] args)
{Scanner keyboard=new Scanner(System.in);
int guess=0; System.out.println("I have two favorite numbers.");
System.out.println("Try to guess one.");
guess=keyboard.nextInt(); if(guess==7||guess==15){
System.out.println("That is one of my favorites.");}
else System.out.println("Not one of my favorites.");}}</pre>
	<p>
		The second program is identical to the first, except whitespace characters and a few braces have been added.  It is much easier to read.  Note that the braces are always on the same level as the preceding line, and the code inside the braces is indented one additional level
	</p>
	<h3>
		Example 2 – Neat
	</h3>
	<pre>
import java.util.Scanner;

public class Favorites
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		int guess = 0;

		System.out.println("I have two favorite numbers.");
		System.out.println("Try to guess one.");

		guess = keyboard.nextInt();

		if(guess == 7 || guess == 15)
		{
			System.out.println("That is one of my favorites.");
		}
		else
		{
			System.out.println("Not one of my favorites.");
		}
	}
}</pre>

	<h2 id="VariableNames">
		Variable Names
	</h2>
	<p>
		Good variable names make code more readable.  A good variable name describes the information it holds.  Although short variable names are useful for examples and worksheets, names like those given below lead to confusion.  As programs become bigger, the number of variables increases, and it becomes more difficult to remember what a variable called "stuff", or "num" was supposed to be for.
	</p>
	<pre style="color:red">
double amt = 0;		<strong>Bad Variable Names</strong>
int ht = 0;
double a = 0;
int var = 0;
String s = "";</pre>
	<p>
		If a variable is named properly, its function is more obvious.
	</p>
	<pre style="color:blue">
double myMoney = 0; 	<strong>Good Variable Names</strong>
int height = 0;
double examAverage = 0;
String firstName = "";</pre>
	<p>
		Well named variables lead to self documenting code, which means the code reads almost like an English sentence.
	</p>
	<pre>
double myMoney = 0;
boolean broke = false;
...
<strong>if(myMoney < 0)</strong>		If my money is less than zero
{
	broke = true;		
}</pre>
	
	<h2 id="Comments">
		Comments
	</h2>
	<p>
		A comment is a line or block of text that is ignored by the compiler.  Comments are used by programmers to leave notes for themselves and others to explain code.  Java supports two types of comments; line comments and block comments.
	</p>
	<p>
		Programs should always include comments where useful.  Most of the small examples in this book do not include comments to make the examples shorter.
	</p>
	<p>
		A line comment is indicated with a double slash (//).  The comment can start at the beginning of a line, or following some code.  All characters following the double slash will be ignored by the compiler.  Line comments are often used for commenting variables and for short headings.
	</p>
	<pre>
// This is a line comment</pre>
	<p>
		Well-commented Code
	</p>
	<pre>
public class Favorites
{
	public static void main(String[] args)
	{
		// Variables
		Scanner keyboard = new Scanner(System.in);

		int guess = 0;		// User's guess

		// Get guess from user
		System.out.println("I have two favorite numbers.");
		System.out.println("Try to guess one.");
		guess = keyboard.nextInt();

		// Check guess
		if(guess == 7 || guess == 15)
		{
			System.out.println("That is one of my favorites.");
		}
		else
		{
			System.out.println("Not one of my favorites.");
		}
	}
}</pre>
	<p>
		Block comments begin with a slash asterisk sequence (/*), and end with an asterisk slash sequence (*/).  Like a line comment, a block comment can start at the beginning of a line, or after some code.  Unlike a line comment, a block comment can begin and end on the same line.
	</p>
	<pre>
/* This is a comment */  x = 5;</pre>
	<p>
		The assignment x = 5 will not be ignored by the compiler.  Block comments are used for title blocks and other multiline comments.
	</p>
	<pre>
/***************************************************
* Favorites.java
*                                  
* Programmer: Bob Bobertson
* Date: 6-30-2009
* Version 1.0
*
* Program Description: This program asks the user
* enter a number.  It then determines if that
* number is a 7 or 15, and informs the user.
*
***************************************************/

import java.util.Scanner;

public class Favorites
{
	public static void main(String[] args)
	{
		<strong>// Variables
		/* The Scanner variable is used to read
		   user input from the keyboard. */</strong>
		Scanner keyboard = new Scanner(System.in);

		int guess = 0;		<strong>// User's guess</strong>

		<strong>// Get guess from user</strong>
		System.out.println("I have two favorite numbers.");
		System.out.println("Try to guess one.");
		guess = keyboard.nextInt();

		<strong>// Check guess</strong>
		if(guess == 7 || guess == 15)
		{
			System.out.println("That is one of my favorites.");
		}
		else
		{
			System.out.println("Not one of my favorites.");
		}
	}
}</pre>
	<p>
		Every program should start with a title block listing at least the name of the file, the author, and the date.  Often, programmers use extra asterisks within the title block to separate it from the code more clearly.  Additional information might be included, such as a version number, a functional description, and modifications.
	</p>
	<p>
		Since comments do not affect the compiled program, there are no strict rules to follow, but the following guidelines will keep your code neat and readable.
	</p>
	<p>
		Use comments for major program sections as above.  This makes it easy to find the right place in your program when you need to make a change or fix an error.
	</p>
	<p>
		Keep comments short and to the point.  You shouldn't have more comments than code.
	</p>
	<pre>
		Over commenting
<strong>// Get guess from user so it can be compared</strong>

<strong>/* The next line tells the user that the
program has 2 favorite numbers. */</strong>
System.out.println("I have two favorite numbers.");
<strong>/* Ask the user to enter a number so that
it can be compared to the program's favorite
numbers */</strong>
System.out.println("Try to guess one.");
<strong>/* Read the user input from the keyboard
using the Scanner variable. */</strong>
guess = keyboard.nextInt();</pre>
	<p>
		Don't comment self documenting code.  Comments like this are redundant, and clutter the code.
	</p>
	<pre>
<strong>// This block runs if the guess is equal to 7
// or the guess is equal to 15.</strong>
if(guess == 7 || guess == 15)
{
	System.out.println("That is one of my favorites.");
}</pre>
	<p>
		Some programmers like to mark the beginning and end of if blocks and similar structures with comments.
	</p>
	<pre>
if(guess == 7 || guess == 15)
<strong>{// begin if</strong>
	System.out.println("That is one of my favorites.");
<strong>}// end if</strong></pre>
	<p>
		This is unnecessary for such a small code block, but when they become larger and many blocks are nested inside each other, the comments make the code clearer.  This is especially true when the block is large enough that it does not fit on one page or one screen.
	</p>
	<h2 id="CodeCramming">
		Code Cramming
	</h2>
	<p>
		There are times when you can perform multiple functions in one line of code.  Consider the following two examples.
	</p>
	<h3>
		Example 1 – Too thin
	</h3>
	<pre>
public class Exams
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		double exam1;
		exam1 = 0.0;
		double exam2;
		exam2 = 0.0;
		double exam3;
		exam3 = 0.0;
		double sum;
		sum = 0.0;
		double average;
		average = 0.0;
		double scaled;
		scaled = 0.0;
		double finalScore;
		finalScore = 0.0;

		System.out.print("Enter a grade for Exam 1: ");
		exam1 = keyboard.nextDouble();
		System.out.print("Enter a grade for Exam 2: ");
		exam2 = keyboard.nextDouble();
		System.out.print("Enter a grade for Exam 3: ");
		exam3 = keyboard.nextDouble();

		sum = exam1 + exam2 + exam3;
		average = sum / 3;
		scaled = average + 5;
		finalScore = scaled / 10;

		if(finalScore >= 6)
		{
			System.out.println("You Passed");
		}
	}
}</pre>
	<h3>
		Example 2 – Too thick
	</h3>
	<pre>
public class Exams
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);

		System.out.print("Enter a grade for Exam 1: ");
		double exam = keyboard.nextDouble();
		System.out.print("Enter a grade for Exam 2: ");
		exam = exam + keyboard.nextDouble();
		System.out.print("Enter a grade for Exam 3: ");
		exam = exam + keyboard.nextDouble();

		if(((exam / 3) + 5) / 10 >= 6)
		{
			System.out.println("You Passed");
		}
	}
}</pre>
	<p>
		The two programs function identically, yet the second example looks much shorter.  In the second example, the calculations are all done on one line, rather than four, and inside the if statement.  Fewer variables are used.  Variables are created when needed rather than at the top so they can be initialized to a meaningful value.  In the first example, the variables are created on one line, initialized to zero on another line, and set to a useful value on yet another line.
	</p>
	<p>
		It's usually a good idea to create all of the variables at the top of the program.  That makes it easier to find out what variables the program has and what they are called.
	</p>
	<p>
		It is reasonable to perform multiple mathematical operations on one line as long as the code is clear. 
	</p>
	<p>
		The first example is stretched out too thinly.  The second example has been compressed too much.  The example below falls between, and is more readable than either of the other two.  There is no need to create three separate variables for the exam scores, but it is easier to follow the code if the variables have unique names.  This means we are using a little more memory to store variables then necessary, but our code is easier to write and maintain.  Sometimes it is worth trading some efficiency for clarity, particularly when program performance isn't an issue.
	</p>
	<h3>
		Example 3 – Just right
	</h3>
	<pre>
public class Test
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		double exam1 = 0.0;
		double exam2 = 0.0;
		double exam3 = 0.0;
		double finalScore = 0.0;

		System.out.print("Enter a grade for Exam 1: ");
		exam1 = keyboard.nextDouble();
		System.out.print("Enter a grade for Exam 2: ");
		exam2 = keyboard.nextDouble();
		System.out.print("Enter a grade for Exam 3: ");
		exam3 = keyboard.nextDouble();

		finalScore = (((exam1 + exam2 + exam3) / 3) + 5) / 10;

		if(finalScore >= 6)
		{
			System.out.println("You Passed");
		}
	}
}</pre>
	<h2 id="MagicNumbers">
		Magic Numbers
	</h2>
	<p>
		Magic numbers are constants that appear in the code without any explanation.  They can cause a number of problems.
	</p>
	<p>
		For example, suppose a program is supposed to take a price entered by a user, and add 5% sales tax.
	</p>
	<pre style="color:blue;">
fullPrice = price + price * 0.05;</pre>
	<p>
		This line will compile and run, but if we need to look at the code later, we might wonder what that 0.05 was for.  Longer programs may have many such constants, and it is easy to forget what they were all for.  A better approach is to create a new variable for the value, and give it a meaningful name.  Then use that variable everywhere in place of the constant.
	</p>
	<pre style="color:blue;">
double tax = 0.05;
fullPrice = price + price * tax;</pre>
	<p>
		In addition, there are times when the same constant is used for more than one purpose.  For example, suppose you are writing some sort of baseball program.  The code has the number 9 in it in various places because that is the number of innings in the game.  It also uses the number 9 to specify the number of players on the field.  Suppose you decide to change the game so that it only has 5 innings, and you change all the 9's to 5's.  You might be surprised to find that you now only have 5 players on the field.
	</p>
	<p>
		You may also find that you did not change every 9 in the program that does refer to innings.  If variables are created at the top of the program, one simple edit changes that value everywhere in the program.
	</p>
	<pre style="color:blue;">
int innings = 5;
int players = 9;</pre>
	<p>
		The Java <code>final</code> reserved word allows you to make a variable with a value that can not be changed by the program.  The value is initialized once when the variable is created.  After that, any attempt to change this value will result in an error.  If you know a value should remain constant, this is a good way to ensure that it does.  It is a common convention to use all uppercase characters when naming constants.
	</p>
	<pre style="color:blue;">
final int INNINGS = 5;
final int PLAYERS = 9;</pre>
	<h2 id="DuplicateCode">
		Duplicate Code
	</h2>
	<p>
		Duplicate code is code that appears multiple times within a program, without any variation.  Consider the following program.
	</p>
	<h3>
		Example Program – TreeTopInn
	</h3>
	<p>
		This program calculates the cost to stay at an inn overnight.  The inn charges $50 per night during peak season and $30 per night during off season.  The program asks the user if the stay will be during peak season, and for how many nights.
	</p>
	<pre>
Welcome to the Treetop Inn
$50 a night during peak season
or $30 a night off season.
Will you be staying during peak season? yes
Great!  For how many nights? 4
Okay.  Your bill comes to $200</pre>
	<p>
		The example below will behave the way we want.
	</p>
	<pre>
public class TreeTopInn
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		String input = "";
		int nights = 0;
		int bill = 0;

		final int PEAKPRICE = 50;
		final int OFFPRICE = 30;

		System.out.println("Welcome to the Treetop Inn");
		System.out.println("$50 a night during peak season");
		System.out.println("or $30 a night off season.");
		System.out.print("Will you be staying during peak season? ");
		input = keyboard.next();

		if(input.equals("yes"))
		{
			System.out.print("Great!  For how many nights? ");
			nights = keyboard.nextInt();
			bill = PEAKPRICE * nights;
			System.out.println("Okay.  Your bill comes to $" + bill);
		}
		else
		{
			System.out.print("Great!  For how many nights? ");
			nights = keyboard.nextInt();
			bill = OFFPRICE * nights;
			System.out.println("Okay.  Your bill comes to $" + bill);
		}
	}
}</pre>
	<p>
		Three of the four lines in the <code>if</code> and <code>else</code> blocks are identical.  This makes the code unnecessarily long.  More importantly, as modifications are made to the code, or if errors are being fixed, it is easy to miss a piece of duplicate code.  This causes errors that only happen occasionally, which are harder to notice and fix.
	</p>
	<p>
		With some small alterations, we can get rid of the duplicate code.  In the example below, one new variable has been created.  An int called price is set to either the peak price or the off season price depending upon the user's input.  This is the only line of code that needs to be in the if statement.  Since the price is initialized to the off season price ($30), there is no need for an else statement.  If the user does not choose peak season, the price will remain at $30.
	</p>
	<h3>
		A Better TreeTopInn
	</h3>
	<pre>
public class TreeTopInn
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		String input = "";
		int nights = 0;
		int bill = 0;

		final int PEAKPRICE = 50;
		final int OFFPRICE = 30;
		int price = OFFPRICE;

		System.out.println("Welcome to the Treetop Inn");
		System.out.println("$50 a night during peak season");
		System.out.println("or $30 a night off season.");
		System.out.print("Will you be staying during peak season? ");
		input = keyboard.next();

		if(input.equals("yes"))
		{
			price = PEAKPRICE;
		}
		System.out.print("Great!  For how many nights? ");
		nights = keyboard.nextInt();
		bill = price * nights;
		System.out.println("Okay.  Your bill comes to $" + bill);
	}
}</pre>
	
	<h2 id="PromptingForInput">
		Prompting For Input
	</h2>
	<p>
		There are many times a user is asked to enter input, but might not know what to type.  For example, in the last program, the user was asked:
	</p>
	<pre>
Will you be staying during peak season?</pre>
	<p>
		Without any additional information, the user has no way to know what the options are.  The program should always offer options (usually in parentheses), when input is needed.  Some examples are below.
	</p>
	<pre>
Will you be staying during peak season (yes or no)?
Will you be staying during peak season (y or n)?
Will you be staying during peak season (Y or N)?</pre>
	
	<h2 id="ProgramDesign">
		Program Design
	</h2>
	<p>
		Beginning programmers are often uncertain about starting new programs.  While this gets easier with time, these suggestions may help.
	</p>
	<p>
		Make a list of all program inputs and outputs.
	</p>
	<p>
		Program inputs include anything the user will enter and any constant values "hard coded" into the program. 
	</p>
	<p>
		Program outputs include any data the program will print.  
	</p>
	<pre>
In the TreeTopInn program, the inputs are:
Season (peak or off)
Number of nights (an integer)

The output is:
The bill (an integer)</pre>
	<p>
		Next, write down how you would calculate the output from the inputs.
	</p>
	<pre>
The bill is 30 times the number of nights <strong>if</strong> off season.
The bill is 50 times the number of nights <strong>if</strong> peak season.</pre>
	<p>
		We can see from this that the output requires a multiplication, and that we will need an if statement to determine the numbers involved.  This leads to the code below.
	</p>
	<pre>
if(input.equals("yes"))
{
	price = peakPrice;
}
System.out.print("Great!  For how many nights? ");
nights = keyboard.nextInt();
bill = price * nights;</pre>
	<p>
		Write programs in a modular fashion.  Don't try to calculate results while still taking in input.  Get all user input first.  Then perform calculations.  Then display the results.  Every program is different, but If you separate a program's functionality into steps, each step can be written and tested separately.
	</p>
	<p>
		Write and test one step at a time.  After each step, print the values of the variables to see if they are what you expect.  Programmers often enter temporary debugging code that prints the values of variables at different places in the program.  This code is removed when the program has been tested.  It is difficult to fix a program when it has multiple errors in many places.  Don't let them build up.
	</p>
	
	<h2 id="Errors">
		Errors
	</h2>
	<p>
		There are three kinds of program errors; syntax errors, runtime errors, and logic errors.
	</p>
	<p>
		Syntax errors or compiler errors occur when you break the rules of the language.  Your error is so bad, the compiler can tell it can't possibly be right.  The compiler sends you a message explaining the error, and compilation fails.
	</p>
	<p>
		Runtime errors or exceptions occur when the program follows the rules of the language and compiles, but encounters a problem while running that makes it impossible to continue (division by zero for example).  The program will "throw an exception".  Exception is a polite word for fit.  The program will spit out a cryptic list of errors and stop running.
	</p>
	<p>
		Logic errors occur when the program runs fine, but gives you the wrong answer.  These are often the hardest problems to fix because there are no error messages.  However, we can put in our own messages.  Add temporary print statements that print the values of the variables before and after they change.  This often helps to find exactly where the program is going awry, and to see what it is doing.
	</p>
	
	<h2 id="Exceptions">
		Exceptions
	</h2>
	<p>
		When a Java program terminates abruptly, we say that it throws an exception.  An error message is generated and printed on the console.
	</p>
	<pre>
Welcome to the Treetop Inn
$50 a night during peak season
or $30 a night off season.
Will you be staying during peak season? <strong>yes</strong>
Great!  For how many nights? <strong>four</strong>

Exception in thread "main" java.util.<strong>InputMismatchException</strong>
        at java.util.Scanner.throwFor(Scanner.java:840)
        at java.util.Scanner.next(Scanner.java:1461)
        at java.util.Scanner.nextInt(Scanner.java:2091)
        at java.util.Scanner.nextInt(Scanner.java:2050)
        at TreeTopInn.main(<strong>TreeTopInn.java:27</strong>)</pre>
	<p>
		In the example above, the user entered "four" for the number of nights.  Since the program expects to store this response in an int, it can not continue.  The first line describes the type of exception.
	</p>
	<pre>
Exception in thread "main" java.util.<strong>InputMismatchException</strong></pre>
	<p>
		The program has thrown an InputMismatchException because the input does not match what was expected.
	</p>
	<p>
		The rest of the lines in the error message are called a stack trace.  According to the stack trace, the problem was encountered in the file Scanner.java on line 840.
	</p>
	<pre>
at java.util.Scanner.throwFor(<strong>Scanner.java:840</strong>)</pre>
	<p>
		This method was called from another place in the Scanner.java file on line 1461.
	</p>
	<pre>
at java.util.Scanner.next(<strong>Scanner.java:1461</strong>)</pre>
	<p>
		Which was called from yet another place in Scanner.java on line 2091.
	</p>
	<pre>
at java.util.Scanner.nextInt(<strong>Scanner.java:2091</strong>)</pre>
	<p>
		Which was called from yet another place in Scanner.java on line 2050.
	</p>
	<pre>
at java.util.Scanner.nextInt(<strong>Scanner.java:2050</strong>)</pre>
	<p>
		Which was called from our program, TreeTopInn.java on line 27.
	</p>
	<pre>
at TreeTopInn.main(<strong>TreeTopInn.java:27</strong>)</pre>
	<p>
		The stack trace lists all the parts of the code involved in the exception, even the parts we didn't write.  Of course, the error is in our code.  When you see an exception message like this, look for the line that contains your program name.  Looking at TreeTopInn line 27:
	</p>
	<pre>
nights = keyboard.nextInt();</pre>
	<P>
		We see that the error was caused when this line tried to read user input using nextInt(), and did not read an int.
	</P>
	
	<h2 id="FlowDiagrams">
		Flow Diagrams
	</h2>
	<p>
		The program below prints a different message depending upon the user input.  If the user enters “1”, the program prints one message.  If the user enters anything else, a different message is printed.
	</p>
	<pre>
public class IfClass
{
    public static void main(String[] args)
    {
        java.util.Scanner input = new java.util.Scanner(System.in);
        int x = 0;

        System.out.println(“Pease enter a 1”);
        x = input.nextInt();
<strong>
        if(x == 1)
        {
            System.out.println(“You entered 1”);
        }
        else
        {
            System.out.println(“That wasn’t a 1”);
        }</strong>
    }
}</pre>
	<p>
		We can depict the flow of the if/else structure using a flow diagram.  The flow of program execution is shown by the arrows.
	</p>
	<p style="text-align: center;"><%= image_tag "c4_p16.jpg"%></p>
	<p>
		A rectangular block is used to depict a line or block of code.
	</p>
	<p>
		<p style="text-align: center;"><%= image_tag "c4_p17_01.jpg"%></p>
	</p>
	<p>
		An <code>if</code> statement is represented by a diamond.
	</p>
	<p>
		<p style="text-align: center;"><%= image_tag "c4_p17_02.jpg"%></p>
	</p>
	<p>
		The diamond has two exit branches.  The true branch shows what happens if the condition is true.  This corresponds to the code inside the <code>if</code> braces.  The false branch shows what happens if the condition is false.  This corresponds to the code inside the <code>else</code> braces.
	</p>
	<p>
		The two branches meet at a summing junction, represented by a circle, signifying the end of the <code>if</code> and <code>else</code> blocks.
	</p>
	<p style="text-align: center;"><%= image_tag "c4_p17_03.jpg"%></p>
	<p>
		If the if statement has no else block, a line in the flow diagram shows that the program flow goes straight to the summing junction without doing anything.
	</p>
	<pre>
if(x == 1)
{
	System.out.println("You entered 1");
}</pre>
	<p style="text-align: center;"><%= image_tag "c4_p17_04.jpg"%></p>
	<p>
		Often, there are multiple ways to do one thing.  A flow diagram depicts the actual implementation that is used.  Compare the examples below.  Both examples set the variable a to 100 if x is positive, and to 0 if x is negative.  The code on the left uses two <code>if</code> statements in series.  The code on the right uses a single <code>if/else</code> structure.  This difference is apparent in the flow diagrams.
	</p>
	<p style="text-align: center;"><%= image_tag "c4_p17_05.jpg"%></p>
	<p>
		The example below uses nested if statements.
	</p>
	
	<div class="container-fluid2">
  <div class="row">
    <div class="col-sm-2" >
	<pre>
if(x == 0)
{
	if(y == 0)
	{
		a = 1;
	}
	else
	{
		a = 2;
	}
}
else
{
	if(y == 0)
	{
		a = 3;
	}
	else
	{
		a = 4;
	}
}</pre>
    </div>
    <div class="col-sm-10">
    	<p style="text-align: center;"><%= image_tag "c4_p19.jpg"%></p>
    </div>
  </div>
	</div>	
	
<!-- ========Worksheet and AssignmentPrograms================= --> 

<div id="Worksheet6">
	<h4>Worksheet 6: Flow Diagrams</h4>
	<p>Draw a flow diagram for each program.</p>
	<p>Example</p>
	
	<div class="container-fluid2">
  <div class="row">
    <div class="col-sm-6" >
    		<div class="codeblock2">
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int a = 0;

	x = in.nextInt();

	if(x == 0)
	{
		a = 5;
	}
	else
	{
		a = 7;
	}

	System.out.print(a);
}
    		</div>
    </div>
    <div class="col-sm-6">
    	<p style="text-align: center;"><%= image_tag "c4_p20.jpg"%></p>
    </div>
  </div>
	</div>
	
	<div class="container-fluid2">
  <div class="row">
    <div class="col-sm-6" >
    	<hr style="margin: 0;">
    	<div class="codeblock2">
1.
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int y = 0;
	int a = 0;

	x = in.nextInt();
	y = in.nextInt();

	if(x <= -4)
	{
    		if(y < -5)
    		{
        		a = y - 2;
    		}
    		else
    		{
        		a = y + 1;
    		}
	}
	else
	{
    		if(y != -4)
    		{
        		a = 2;
    		}
	}
	System.out.print(a);
}    	</div>
    </div>
    <div class="col-sm-6">
    	<hr style="margin: 0;">
    	<div class="codeblock2">
2.
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int a = 0;

	x = in.nextInt();

	if(x < 3)
	{
    		a = 3;
	}
	else
	{
    		if(x != 0)
    		{
        		x = a + 3;
        		a = 2;
    		}
    		else
    		{
        		a = -1;
    		}
	}
	System.out.print(a);
}    	</div>
    </div>
  </div>
	</div>	
	
	<div class="container-fluid2">
  <div class="row">
    <div class="col-sm-6" >
    	<hr style="margin: 0;">
    	<div class="codeblock2">
3.
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int y = 0;
	int a = 0;

	x = in.nextInt();
	y = in.nextInt();

	if(y < -2 && x > 0)
	{
    		if(y == -3)
    		{
        		a = -2;
    		}
	}
	else
	{
    		if(x == -1)
    		{
        		a = -1;
    		}
	}
	System.out.print(a);
}
    	</div>
    </div>
    <div class="col-sm-6">
    	<hr style="margin: 0;">
    	<div class="codeblock2">
4.
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int y = 0;
	int a = 0;

	x = in.nextInt();
	y = in.nextInt();

if(x <= -1)
{
    if(x >= 1)
    {
        a = 3;
        x = 2;
    }
    else
    {
        a = a + 1;
    }
}
if(x == 3)
{
    a = 2;
}
else
{
    if(y <= -1 && y != -5)
    {
        a = -3;
    }
    else
    {
        a = x - 3;
    }
}
	System.out.print(a);
}    	</div>
    </div>
  </div>
	</div>	
	
	<div class="container-fluid2">
  <div class="row">
    <div class="col-sm-6" >
    	<hr style="margin: 0;">
    	<div class="codeblock2">
5.
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int y = 0;
	int a = 0;

	x = in.nextInt();
	y = in.nextInt();

if(x >= -3 || x <= -1)
{
    if(x < -2)
    {
        a = 2;
    }
}
if(y < -2 || y == -3)
{
    if(y > -3 && y < -2)
    {
        x = y - 3;
        a = x - 3;
    }
    else
    {
        a = 3;
    }
}
else
{
    if(x <= -1 && x < -3)
    {
        a = 3;
    }
    else
    {
        a = x + 3;
        y = -3;
    }
}
	System.out.print(a);
}    	</div>
    </div>
    <div class="col-sm-6">
    	<hr style="margin: 0;">
    	<div class="codeblock2">
6.
public static void main(String[] args)
{
	Scanner in = new Scanner(System.in);
	int x = 0;
	int a = 0;

	x = in.nextInt();

	if(x != -2)
	{
		if(x >= 1)
 {
     a = 3;
     x = 2;
 }
 else
 {
     a = a + 1;
 }
	}
	if(x <= 0)
	{
    	a = 3;
	}
	else
	{
    	if(x != 0)
    	{
        	x = a + 3;
        	a = 2;
    	}
	}
   if(x > 0)
   {
		a = -1;
   }
	System.out.print(a);
}    	</div>
    </div>
  </div>
	</div>	
	
</div>

<div id="AssignmentPrograms">
	<h3>Assignment Programs</h3>
	<br/>
	<h4>ParkingGarage</h4>
	<p>
		This program calculates the cost to park your car in a big fancy parking garage.  The minimum cost to park is $10, which includes four hours of parking.  Thereafter, the charge is $5 for every four hours or fraction thereof.  So, customers are always charged for 4, 8, 12, 16, ... hours.  If you would like your car detailed, it's an extra $5.
	</p>
	<br/>Sample Run
	<div class="codeblock2">
Welcome to the Parking Garage
For how many hours will you park? <strong>6</strong>
Okay.  We'll charge you for 8 hours.
Would you like your car detailed (y or n)? <strong>n</strong>
Your loss.  
Parking will cost you $15	</div>
<br/>
<h4>CellPhoneBill</h4>
<p>
This program calculates a monthly cell phone bill according to the following terms:<br/>
Basic service: $49.99 (includes 400 anytime minutes)<br/>
Additional day minutes: $0.50 each<br/>
Additional night minutes: $0.10 each<br/>
Connection fee: $0.03 per minute (applies to anytime, day, and night minutes)<br/>
A 5% scam tax is applied to each bill.
</p>Sample Run
<div class="codeblock2">
Billing Statement
=================

Daytime minutes: <strong>600</strong>
Nighttime minutes: <strong>300</strong>

Basic service > $49.99
Additional minutes > $130.00
Connection fees > $27.00
Subtotal > $206.99
Scam tax > $10.34
Total >> $217.33</div>
<p>Your program will display numbers like $27.0 and $10.3495.  That's okay for now.</p>
<br/>
<h4>Calculator</h4>	
<p>
	This program functions as a simple calculator.  It can add, subtract, multiply, or divide two numbers.  The user enters an operation and the two numbers.
</p>Sample Run
<div class="codeblock2">
Calculator

Operation (a, s, m, or d): <strong>a</strong>
Number 1: <strong>5.5</strong>
Number 2: <strong>2.2</strong>
Answer: 5.5 + 2.2 = 7.7</div>	
	
</div>
