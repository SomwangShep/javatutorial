<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#typeJump">Types</a></td><td><a href="#creatingVariable">Creating Variables</a></td><td><a href="#assignment">Assignment Statements</a></td><td><a href="#mathematical">Mathematical Operations</a></td></tr>
		<tr><td><a href="#typeCasting">Type Casting</a></td><td><a href="#mathSh">Mathematical Shortcuts</a></td><td><a href="#orderOfOpe">Order of Operations</a></td><td><a href="#stringJump">Strings</a></td></tr>
		<tr><td><a href="#userInputJump">User Input</a></td><td><a href="#scannerJump">Scanner methods</a></td><td><a href="#programJump">Program Execution</a></td><td><a href="#calJump">Calculating Programs</a></td></tr>
		<tr><td><a href="#Worksheet2">Worksheet 2: Assignment Statements</a></td><td><a href="#Worksheet3">Worksheet 3: Program Execution</a></td><td colspan="2"><a href="#AssignmentPrograms">Assignment Programs</a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 2 – Variables </h1>
  <p>
    A variable is a name that corresponds to a value stored in the <a href="https://www.tutorialspoint.com/computer_fundamentals/computer_memory.htm" target="_blank">memory of the computer</a>.  We use variables in a program to hold values that are entered by a user, or are the result of a calculation.  When a variable is created, a section of memory is set aside to hold the value.  A variable must be created before it can be used.  The value of a variable can change as the program executes.  The number 5 is a constant.  It can not be changed.  It is always 5.  The value of a variable called x could change many times in a program.  On any line, a variable can be set to the value of a constant, another variable, or an expression involving both constants and variables.
  </p>
  <h2 id="typeJump"> Types </h2>
  <p>
    Every variable has a type.  The type of a variable refers to the kind of value it can hold.  The Java language defines <a href="http://cs.fit.edu/~ryan/java/language/java-data.html" target="_blank">eight primitive types</a>; boolean, byte, char, double, float, int, long, and short.  We will use four of these eight in this book.    
  </p>
	<table class ="customers">
		<tr><td><strong>boolean</strong></td><td>Holds a <code>true</code> or a <code>false</code></td></tr>
		<tr><td><strong>int</strong></td><td>Holds an integer, like 5, 0, or -64</td></tr>
		<tr><td><strong>double</strong></td><td>Holds a decimal number, like 2.7 or -15.83</td></tr>
		<tr><td><strong>char</strong></td><td>Holds one character, like b,6, or &</td></tr>
	</table>  
	<p>
	  A <code>boolean</code> variable can be set to the value <code>true</code>, or the value <code>false</code>.  These are the only two boolean constants.  The computer actually stores a number, 1 for true and 0 for false.  The boolean type requires one bit of memory.
	</p>
	<p>
	  An <code>int</code> variable can be set to a positive or negative whole number.  The value of an int can range from -2147483648 to 2147483647.  The int type requires 4 bytes (32 bits) of memory.
	</p>
	<p>
	  A <code>double</code> variable can be set to very large or very small positive and negative numbers (values higher than 10<sup>300</sup>, and lower than10<sup>-300</sup>).  The numbers can include a decimal point, and well over 10 significant digits.  The double type requires 8 bytes (64 bits) of memory.
	</p>
	<p>
	  A <code>char</code> variable can be set to any one character.  A char constant must be enclosed with apostrophes (').  The char type requires 2 bytes (16 bits) of memory.  
	</p>
	<p>
	  All data in a computer are stored as numbers.  A char value is assigned a number according to the <a href="http://www.ascii-code.com/" target="_blank">ASCII</a> standard (American Standard Code for Information Interchange).  The table below lists the <a href="http://www.ascii-code.com/" target="_blank">ASCII</a> values for the printable characters.
	</p>
	<p>
	  Printable ASCII Characters
	</p>
	<table class="customers2">
		<tr><td>32 space</td><td>42  *</td><td>52  4</td><td>62  ></td><td>72  H</td><td>82 R</td><td>92 \</td><td>102 f</td><td>112 p</td><td>122 z</td></tr>
		<tr><td>33  !</td><td>43  +</td><td>53  5</td><td>63  ?</td><td>73  I</td><td>83 S</td><td>93 ]</td><td>103 g</td><td>113 q</td><td>123 {</td></tr>
		<tr><td>34  "</td><td>44  ,</td><td>54  6</td><td>64  @</td><td>74  J</td><td>84 T</td><td>94 ^</td><td>104 h</td><td>114 r</td><td>124 |</td></tr>
		<tr><td>35  #</td><td>45  -</td><td>55  7</td><td>65  A</td><td>75  K</td><td>85 U</td><td>95</td><td>105 i</td><td>115 s</td><td>125 }</td></tr>
		<tr><td>36  $</td><td>46  .</td><td>56  8</td><td>66  B</td><td>76  L</td><td>86 V</td><td>96 `</td><td>106 j</td><td>116 t</td><td>126 ~</td></tr>
		<tr><td>37  %</td><td>47  /</td><td>57  9</td><td>67  C</td><td>77  M</td><td>87 W</td><td>97 a</td><td>107 k</td><td>117 u</td><td></td></tr>
		<tr><td>38  &</td><td>48  0</td><td>58  :</td><td>68  D</td><td>78  N</td><td>88 X</td><td>98 b</td><td>108 l</td><td>118 v</td><td></td></tr>
		<tr><td>39  '</td><td>49 1</td><td>59  ;</td><td>69  E</td><td>79  O</td><td>89 Y</td><td>99 c</td><td>109 m</td><td>119 w</td><td></td></tr>
		<tr><td>40  (</td><td>50  2</td><td>60  <</td><td>70  F</td><td>80  P</td><td>90 Z</td><td>100 d</td><td>110 n</td><td>120 x</td><td></td></tr>
		<tr><td>41  )</td><td>51  3</td><td>61  =</td><td>71  G</td><td>81  Q</td><td>91 [</td><td>101 e</td><td>111 o</td><td>121 y</td><td></td></tr>
	</table>  	
	<h2 id="creatingVariable">
		Creating Variables
	</h2>
	<p>
		A new variable is created with the following format:
	</p>
	 <p style="text-align: center;"><%= image_tag "c2_p2.jpg"%></p>
	 <p>
	 	Examples:
	 </p>
	<pre>
Boolean b;
char letter3;
int x;
double unitPrices;</pre>
	<p>
		The name must start with a letter.  It can have numbers in it, as long as they are not the first character.  No other characters may be used.  By convention, we always start variable names with a lowercase letter.  Java does not require this, but it does make programs easier to read.
	</p>
	<h2 id="assignment">
		Assignment Statements
	</h2>
	<p>
		Once a variable has been created, it must be set to a specific value with an assignment statement before it can be used.  An assignment statement uses the assignment operator (=), and ends with a semicolon.  The value on the right side of the assignment operator is stored in the variable on the left side.
	</p>
	<p style="text-align: center;"><%= image_tag "c2_p3.jpg"%></p>
	<p>
		When a variable is created, a section of memory is reserved.  Later in the program, when this variable name is used, it refers to the value in memory.  The number 65 is stored for the character 'A'.  Primitives store only numbers.  Aside from size, the difference between the different primitive types is the way the number is interpreted.  When a primitive variable is joined to a String with the concatenation operator, the value is converted to a String based on the variable's type.
	</p>
	<p>
		A value can be assigned to a variable when it is created.  This is called initializing a variable.
	</p>
	<pre>
boolean b = true;
char letter3 = 'A';
int x = 5;
double unitPrice = 2.98;</pre>
	<h2 id="mathematical">Mathematical operations </h2>
	<p>
		While the left side of an assignment statement must have only a single variable, the right side may include any number of constants, variables, and operations.
	</p>
	<pre>
x = 4 + y / 7;</pre>			
	<p>
		The following mathematical operations are defined by Java:
	</p>
	<pre>
Addition (+)
Subtraction (-)
Multiplication (*)
Division (/)
Modulo (%)</pre>
	<P>
		These operations can be performed on <code>ints</code> and <code>doubles</code>.  Addition, Subtraction, and multiplication behave the same for <code>ints</code> and <code>doubles</code>.  Division behaves differently for <code>ints</code> than it does for doubles.  The modulo operator can only be applied to <code>ints</code>.
	</P>
	<P>
		An operator operates on the two numbers to either side of it.  If the two numbers surrounding an operator are both <code>ints</code>, the result of the operation must be an <code>int</code>.  This presents a problem when performing division on integers.  For example, the result of 5 divided by 2 is 2.5, which is not an integer.  
	</P>
	<P>
		When an <code>int</code> is divided by another <code>int</code>, the result is the whole number part of the quotient.  That means the decimal portion is removed.  Note that the number is not rounded.  The examples below are not Java code.  The => symbol is being used to mean "results in".
	</P>
	<P>Examples:</P>
	<pre>
5 / 2 => 2
20 / 6 => 3
3 / 4 => 0</pre>
	<p>
		The modulo operator gives the decimal part of the division in the form of a remainder.
	</p>
	<P>
		Examples:
	</P>
	<pre>
5 % 2 => 1
20 % 6 => 2
3 % 4 => 3</pre>
	<P>
		Suppose you have some number of items and you wish to put them in groups.  
	</P>
	<ul>
		<li>The result of integer division is the number of complete groups you can make.  </li>
		<li>The result of the modulo operation is the number of left over items.</li>
	</ul>
	<p style="text-align: center;"><%= image_tag "c2_p5.jpg"%></p>
	<P>
		If you wish to divide two integer constants and get a <code>double</code> for a result, enter one (or both) of the integers as <code>doubles</code>.
	</P>
	<p>
		Examples:
	</p>
	<pre>
5.0 / 2 => 2.5
20 / 6.0 => 3.3333333...
3.0 / 4.0 => 0.75</pre>
	<p>
		Of course, this can not be done when variables are used.
	</p>
	<h2 id="typeCasting">Type Casting	</h2>
	<P>
		Type casting refers to the conversion of a value from one type to another.  In some cases, we are not aware of the conversion.  If we assign an <code>int</code> value to a <code>double</code> variable, the conversion is automatic because a double variable can hold an integer.
	</P>
	<pre>
int x = 5;
double y = x;</pre>
	<P>
		On the other hand, we can not assign a <code>double</code> value to an <code>int</code> variable.  If we try, the compiler will complain because part of the value might be lost.
	</P>
	<pre>
double y = 3.7;
int x = y;</pre>

<strong>Compiler Error</strong>
possible loss of precision
found   : double
required: int
int x = y;
    ^
	</p>
	<P>
		If we actually want to remove the decimal portion and store the integer part, we have to tell the compiler explicitly to cast the value to the <code>int</code> type.  To cast a value to a new type, precede the value with the new type, enclosed in parentheses. 
	</P>
	<pre>
int x = (int)3.7;</pre>
	<P>
		You can cast both constants and variables.  Casting a variable does not change the value of the variable.  It only changes how that value is assigned to the new variable.
	</P>
	<Pre>
double y = 3.7;
int x = (int)y;</Pre>
	<p>
		x is 3, but y is still 3.7.
	</p>
	<p>
		If you want the result of integer division to retain the decimal part, cast one or both operands to a <code>double</code>.  This applies to variables as well as constants.
	</p>
	<Pre>
y = (double)4 / 5</Pre>
	<P>
		If a <code>char</code> is cast to an <code>int</code>, the result will be the ACSII value for that <code>char</code>.<br>
		If an <code>int</code> (variable or constant) is cast to a char, the character will have the ASCII value of the original <code>int</code>.

	</P>
	<P>
		Example Program – Casting 
	</P>
	<Pre>
public class Casting
{
	public static void main(String[] args)
	{
		char letter = 'J';
		<strong>int value = (int)letter;</strong>

		System.out.print("The ASCII value of " + letter);
		System.out.println(" is " + value);

		value = 75;
		<strong>letter = (char)value;</strong>

		System.out.print("The ASCII character for " + value);
		System.out.println(" is " + letter);
	}
}</Pre>
	<p style="text-align: center;"><%= image_tag "c2_p7.jpg"%></p>
	<h2 id="mathSh">
		Mathematical Shortcuts
	</h2>
	<P>
		The following shortcuts are not needed, but are supported for convenience.
	</P>
	<pre>
x++;		is equivalent to		x = x + 1;
x--;		is equivalent to		x = x – 1;
x += n;		is equivalent to		x = x + n;
x -= n;		is equivalent to		x = x – n;
x *= n;		is equivalent to		x = x * n;
x /= n;		is equivalent to		x = x / n;
x %= n;		is equivalent to		x = x % n;</pre>
	<h2 id="orderOfOpe">
		Order of Operations
	</h2>
	<p>
		When the computer executes an assignment statement, it performs one operation at a time.  The operations are performed in the following order.  For each step, if there are multiple operations of the same kind, they are performed left to right.
	</p>
	<pre>
Replace variables
Casting
Multiplications and Divisions (*, /, %)
Additions and Subtractions (+, -)
Assignment (=)</pre>
	<p>
		Example
	</p>
	<pre>
double a;
double b = 3.8;
int c = 4;

a = 5 + c * (int)b - 7 % c;</pre>
	<P>
		Think like the computer.  The operations are listed in steps below.  One type of operation is done on each line.
	</P>
	<p>
		Steps:
	</p>	
	<pre>
a = 5 + 4 * (int)3.8 - 7 % 4		Replace variables
a = 5 + 4 * 3 - 7 % 4			Casting
a = 5 + 12 - 3				Multiplications and Divisions
a = 14					Additions and Subtractions
a ← 14					Assignment</pre>
	<P>
		Parentheses can be used to force a specific order of operations.
	</P>
	<Pre>
12 / (1 + 2) => 4</Pre>
	
	<h2 id="stringJump">
		Strings
	</h2>
	<P>
		Every variable is either of a primitive type or a class type.  Like a primitive type, a class defines the sort of data a variable can hold.  When we make a new variable of a class type, we say that we created a new object.  An object is a specific instance of a class.  For any class, we can create many objects.  The term object refers to the collection of stored data and is composed of multiple primitives.  The variable is called a reference variable.  We say that the reference variable points to the object.
	</P>
	<P>
		An example of a class is the String class.  Each String object is composed of a number of chars.  We can make an object of the String class and a reference variable that points to the object just as we make and initialize a primitive variable.
	</P>
	<Pre>
String firstName = "Dean";</Pre>
	<p>
		The String constant must be enclosed in quotation marks (").  A String variable can be set to a new constant, or to the same value as another variable using an assignment statement.
	</p>
	<Pre>
lastName = firstName;
firstName = "James";</Pre>
	<P>
		Because Strings are so commonly used, we can create them and assign values just as we do with primitives.  But Strings are not primitives, they are objects of a class.  The shortcuts for creating and assigning values do not work when creating objects of other classes.
	</P>
	<p>
		To initialize a new String to an empty String, use:
	</p>
	<pre>
String name = "";</pre>
	<p>
		When the + operator is applied to String objects, it does not perform the same function as it does when it is applied to primitive values.  Rather than add the two values, the Strings are joined.
	</p>
	<pre>
3 + 5 => 8						(+ applied to ints)

"3" + "5" => "35"			(+ applied to Strings)</pre>
	<h2 id="userInputJump">
		User Input
	</h2>
	<p>
		Programs are much more interesting if they do something different each time they run.  We can detect and receive keyboard input by creating an object of the Scanner class.  The Scanner object only needs to be created once.  After that, we can use the same Scanner object each time we read from the keyboard.  We will discuss the creation of objects in detail in a later chapter.  For now, the following line will create a new Scanner object.
	</p>
	<pre>
Scanner keyboard = new Scanner(System.in);</pre>
	<P>
		As with all objects, we need to create a reference variable that points to the object.  This reference variable can have any valid variable name.  Above, the variable name is <code>keyboard</code>, but we could have used <code>input</code>, or <code>myScanner</code>, or <code>fruitSaLaD26</code>.
	</P>
	<pre>
Scanner fruitSaLaD26 = new Scanner(System.in);</pre>
	<p>
		However, <code>keyboard</code> is a better name for a Scanner variable that reads from the keyboard.
	</p>
	<p>
		Scanner is a class that is part of the Java language.  Most of the time, the program has to specify where the computer can find classes.  This isn't the case for Strings because they are used so commonly.  The following line typed before the beginning of the class will tell the compiler where to find the Scanner class.
	</p>
	<pre>
import java.util.Scanner;</pre>
	<h2 id="scannerJump">
		Scanner methods
	</h2>
	<p>
		We use a Scanner object by "calling methods on it".  That means we follow the variable with a period and one of the methods listed below.  
	</p>
	<pre>
next()					Reads the next word
nextInt()				Reads the next int
nextDouble()		Reads the next double
nextLine()  		Reads the next line</pre>
	<p>
		When a Scanner method is called, we say that the program blocks.  That means the program will pause and wait for the user to type.  Once the user presses the Enter key, the method stops blocking and program execution continues.  When the user presses Enter, and the method completes, we say the method returns a value.  That means that the method call is replaced with the value that was entered.  If we assign this returned value to a variable, we can use it later in the program.
	</p>
	<h3>
		Example Program – ScanTester 
	</h3>
	<pre>
import java.util.Scanner;

public class ScanTester
{
	public static void main(String[] args)
	{
		<strong>Scanner keyboard = new Scanner(System.in);</strong>
		String name = "";
		int age = 0;
		double gpa = 0.0;

		System.out.println("Hi there.  What's your first name?");
		<strong>name = keyboard.next();</strong>

		System.out.println("Hi " + name + ".  How old are you?");
		<strong>age = keyboard.nextInt();</strong>

		System.out.println("I see. " + age + " Your current GPA?");
		<strong>gpa = keyboard.nextDouble();</strong>

		System.out.println(gpa + ".  That's Super. " + name);
	}
}</pre>
	<p style="text-align: center;"><%= image_tag "c2_p11.jpg"%></p>
	<p>
		When a user types on the keyboard, characters are stored in the keyboard buffer.  The next() method looks past any whitespace in the keyboard buffer to find the next word.  It removes the next word and returns the characters to the program.  Any remaining characters are left in the buffer for the next Scanner method call.  The nextInt() and nextDouble() methods also find the next word, but convert the String into numbers before returning so that the values can be stored as numbers for calculations.  Since these three methods only read one word at a time and leave any remaining input in the keyboard buffer, a user could run the previous program, and enter all three pieces of information on one line.
	</p>
	<p style="text-align: center;"><%= image_tag "c2_p12.jpg"%></p>
	<p>
		The nextLine() method is the oddball of the group.  It reads everything typed up to the newline character, which it discards.  This allows the user to enter multiple words.  However, a problem occurs if nextLine() is called after next(), nextInt(), or nextDouble(), because these methods leave the newline character from the Enter key in the keyboard buffer.  The nextLine() method will read this newline character and continue without giving the user a chance to enter anything.  An extra call to nextLine() can be used to remove the newline character left by another method call.
	</p>
	<h3>
		Example
	</h3>
	<pre>
import java.util.Scanner;

public class ScanTester
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		String name = "";
		String book = "";
		int year = 0;
		String movie = "";

		System.out.println("Hi there.  What's your name?");
		name = keyboard.nextLine();

		System.out.println("What's your favorite book?");
		book = keyboard.nextLine();

		System.out.println("I've never heard of " + book + " " + name);
		System.out.println("What year was it written in?");
		<strong>year = keyboard.nextInt();</strong>

		System.out.println("Huh...  If you say so.  Favorite movie?");
		<strong>keyboard.nextLine();</strong>
		movie = keyboard.nextLine();
		System.out.println("You're weird.");
	}
}</pre>
	<p style="text-align: center;"><%= image_tag "c2_p13.jpg"%></p>
	<h2 id="programJump">
		Program Execution
	</h2>
	<p>
		As a program runs, the values of the variables change.  When calculating the value for an assignment statement, always use the current values for variables, which are not necessarily the same as the starting values.
	</p>
	<p>
		An assignment statement is used to set the value of a variable to whatever is on the right side of the equals sign.  This expression might include other variables.  It also might include the variable on the left of the assignment.  The old value of the variable is used to determine the new value.
	</p>
	<h3>
		Example
	</h3>
	<p>
		What are the values of x and y after the following code runs?
	</p>
	<pre>
int x = 0;
int y = 2;			<strong>x = 0, y = 2</strong>

x = (5 + 3) / 2;		<strong>x = 4, y = 2</strong>
y = x – 1;			<strong>x = 4, y = 3</strong>
x = x + 1;			<strong>x = 5, y = 3</strong>
y = y + x;			<strong>x = 5, y = 8</strong>

<strong>x = 5, and y = 8</strong></pre>
	<h2 id="calJump">
		Calculating Programs
	</h2>
	<p>
		Using variables and mathematical operators, we can write simple programs that calculate things based on user input.
	</p>
	<h3>
		Example - Budget
	</h3>
	<pre>
import java.util.Scanner;

public class Budget
{
	public static void main(String[] args)
	{
		int pay = 0;
		int car = 0;
		int rent = 0;
		int electricity = 0;
		int food = 0;
		int money = 0;
		Scanner keyboard = new Scanner(System.in);

		System.out.println("*** The Budget Program ***\n");
		System.out.println("Enter whole dollar amounts");

		System.out.print("How much do you make each month? $");
		<strong>pay = keyboard.nextInt();</strong>

		System.out.print("How much is your car payment? $");
		<strong>car = keyboard.nextInt();</strong>

		System.out.print("How much is your rent/mortgage payment? $");
		<strong>rent = keyboard.nextInt();</strong>

		System.out.print("How much is your electricity payment? $");
		<strong>electricity = keyboard.nextInt();</strong>

		System.out.print("How much do you spend on food each month? $");
		<strong>food = keyboard.nextInt();</strong>

		<strong>money = pay - car - rent - electricity - food;</strong>

		System.out.println("You have $" + money + " left.");
	}
}</pre>
	<p style="text-align: center;"><%= image_tag "c2_p15.jpg"%></p>
	<p>
		This program could be written using fewer variables as shown below.
	</p>
	<pre>
import java.util.Scanner;

public class Budget
{
	public static void main(String[] args)
	{
		int <strong>money</strong> = 0;
		Scanner keyboard = new Scanner(System.in);

		System.out.println("*** The Budget Program ***\n");
		System.out.println("Enter whole dollar amounts");

		System.out.print("How much do you make each month? $");
		<strong>money = keyboard.nextInt();</strong>

		System.out.print("How much is your car payment? $");
		<strong>money = money - keyboard.nextInt();</strong>

		System.out.print("How much is your rent/mortgage payment? $");
		<strong>money = money - keyboard.nextInt();</strong>

		System.out.print("How much is your electricity payment? $");
		<strong>money = money - keyboard.nextInt();</strong>

		System.out.print("How much do you spend on food each month? $");
		<strong>money = money - keyboard.nextInt();</strong>

		System.out.println("You have $" + <strong>money</strong> + " left.");
	}
}</pre>
	<p>
		Some programs may require that the numbers be kept separate for later calculations.  Deciding how many variables to use in a program is one of the many choices a programmer must make for each program. 
	</p>

<!-- ========Worksheet and AssignmentPrograms================= --> 
<div id="Worksheet2">
	<h3>Worksheet 2: Assignment Statements</h3>
	<p>In the following, assume a is a double.</p>
	<ol>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int w = -3;
double z = 6.0;

a = w * z + 3.4;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int w = 4;

a = 4 * (w + 2) / 10;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int w = 5;
int x = 14;
double y = 10.3;

a = x % w + 2 * y;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
double y = 8.7;
double z = 10.4;

a = (int)z - ((int)y % (int)3.6);
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int x = 7;
double z = 5.7;

a = 17 % (3 * (x – (int)z));
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int w = 4;
double z = 2.0;

a = ((int)5.8 % (int)7.9 + w) / z;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int w = 12;
int x = 9;
double y = 2.3;

a = 5 * (w - x) - (int)5.2 % (int)y;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int x = 3;
double y = 3.0;

a = 3 / y + x / (double)2 + x / 2;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
int x = 9;

a = 7 – (x – x % (int)7.2) * 3;
			</div>
		</li>
		<li>What is the value of a after the assignment?
			<div class="codeblock2">
double y = 10.6;
double z = 13.3;

a = 6.8 / (2 + (int)y * (int)z % (int)y);
			</div>
		</li>
	</ol>
</div>	

<div id="Worksheet3">
	<h3>Worksheet 3: Program Execution</h3>
	<ol>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
int a = 0;
int b = 0;
a = 2 + 3 – 1;
b = 8 – 12 / 4;
a = a + 2;
b = b – 1;
			</div>
		</li>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
int x = 0;
int y = 0;
x = x + 3;
y = x + y;
y = x * 2;
x = x + 3;
y = y + 1;
			</div>			
		</li>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
int a = 0;
int b = 0;
a = 8 / 3 – 1;
b = a + 2;
b = 13 % b;
a = a + b;
			</div>		
		</li>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
int x = 5;
int y = 3;
x = 12 – x;
y = x - y + 2;
x = 7 + x / 3;
y = y % 2 + 2;
y = y – x;
x = y + x;
			</div>		
		</li>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
double c = 0.0;
double d = 0.0;
c = c + 5;
d = 8 – c – 1;
c = c / d + 1.5;
d = c + d + 3 / d;
c = (d * 2 / (c – 1) + 3) / c;
			</div>		
		</li>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
int a = 2;
int b = 1;
String s = "v";
a = b;
s = s + "a";
b = a;
s = s + a;
a = b + 3;
s = "a" + s;
b = a / 2 + 1;
s = "J" + s;
			</div>		
		</li>
		<li>What are the values of a and b after the following lines execute?
			<div class="codeblock2">
int x = 5;
int y = 4;
int z = 3;
x = x % z + 1;
z = y – x + z;
y = x / 2 * z;
z = z * 2;
x = x + y * 3;
y = x + y + z;
x = x + y – z;
z = 20 % x % y;
			</div>		
		</li>
	</ol>
</div>

<div id="AssignmentPrograms">
	<h3>Assignment Programs</h3>
	<h4>LengthConverter</h4>
	<p>Write a program that converts a length the user enters in inches into centimeters.</p>
	<h4>TimeConverter</h4>
	<P>Write a program that takes a number of hours and converts it to seconds.</P>
	<h4>Tip</h4>
	<p>Given the amount of the check and a percentage, this program calculates the tip.</p>
	<h4>ExamAverage</h4>
	<p>This program calculates the average for 3 exam grades entered by the user.</p>
	<h4>CarCare</h4>
	<p>This program asks the user questions, and calculates the cost for the user to maintain a car.</p>
	<p>Sample Run:</p>
	<div class="codeblock2">
How many tires do you buy each year? <strong>2</strong>
How much does each tire cost? <strong>49.99</strong>
How many windshield wipers do you buy each year? <strong>2</strong>
How much does each windshield wiper cost? <strong>9.99</strong>
How much do you spend on brakes each year? <strong>100</strong>

It costs you $219.96 per year to maintain your car.
	</div>
	
	<h4>ChangeMaker</h4>
	<p>
		The ChangeMaker program takes a total amount of cents and prints the number of each denomination ($100, $50, $20, $10, $5, $1, half-dollar, quarter, dime, nickel, penny).
	</p>
	
	<h4>SystemBuilder</h4>
	<p>
		This program calculates the price to build a big fancy networked computer system.  There are five components buyers may choose to use.  This program asks how many of each component the user would like, calculates a total, adds a 4.2% fancy tax, and displays a receipt showing the number of each item ordered and cost, and the final totals as shown in the example below.
	</p>
	<p>
		Prices:<br/>
Computers - $1000<br/>
Network Cards - $49.95<br/>
Switches -  $78.30<br/>
Cables – $12.98<br/>
Flux Capacitors – $765.99
	</p>
	<p>Sample Run:</p>
	<div class="codeblock2">
Hi thank you for choosing System Builder
We really care about your money
How many computers would you like today?
3
How many network cards would you like today?
76
How many switches would you like today?
2
How many cables would you like today?
0
How many flux capacitors would you like today?
1

That’s great!!
You ordered:
3 computers for $3000
76 network cards for $3796.20
2 switches for $156.60
0 cables for $0
and 1 flux capacitors for $765.99

That brings your total, including fancy tax, to:
$8042.98
Please pay now.
	</div>
	
</div>
