<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#CreatingObjects">Creating Objects</a></td><td><a href="#Methods">Methods</a></td><td><a href="#MethodDescriptions">Method Descriptions</a></td><td><a href="#Scanner">Scanner</a></td><td><a href="#Random">Random</a></td><td><a href="#StaticMethods">Static Methods</a></td></tr>
		<tr><td><a href="#Math">Math</a></td><td><a href="#Arrays">Arrays</a></td><td><a href="#Integer">Integer</a></td><td><a href="#Double">Double</a></td><td><a href="#Character">Character</a></td><td><a href="#JOptionPane">JOptionPane</a></td></tr>
		<tr><td><a href="#String">String</a></td><td><a href="#Thread">Thread</a></td><td colspan="2"><a href="#Worksheet10">Worksheet 10: Static Methods</a></td><td colspan="2"><a href="#AssignmentPrograms">Assignment Programs</a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 8 - Classes Objects and Methods</h1>
  <p>
  	<code>Every variable has a type</code>.  The type can be one of the eight primitive types (<code>int, double, boolean, char, long, short, float, byte</code>), or the type can be a <code>class</code>, like String or Scanner.  If a new variable is of a primitive type, an area of memory is reserved to hold the value to be stored
  </p>
  <p style="text-align: center;"><%= image_tag "c8_p1.jpg"%></p>
  <p>
  	If the variable is of a <code>class</code> type, the data will not fit in one memory slot.  In this case, a larger area of memory is reserved elsewhere, and the number stored is the address of this larger area.  This sort of variable is often called a pointer, since it contains a number that points to the data rather than the data itself.  Another common name is reference variable, since the variable holds a reference to the data rather than the data itself.  If no initialization value is given, the value 0 (also called <code>null</code>) is stored.  We call this variable a <code>null</code> pointer.
  </p>
  <p style="text-align: center;"><%= image_tag "c8_p1_02.jpg"%></p>
  <p>
  	(Technically, the number stored is not a memory address, but an object ID number that is associated with a memory location.)
  </p>
  <h2 id="CreatingObjects">
  	Creating Objects
  </h2>
  <p>
  	To reserve memory when creating a new object, we use the Java reserved word <code>new</code>.  In general, to create a new reference variable and object:
  </p>
  <p style="text-align: center;"><%= image_tag "c8_p2.jpg"%></p>
  <p>
  	For example:
  </p>
  <pre>
String firstName = new String("Harry");</pre>
<p>
	This creates a <code>new</code> object of the <code>class</code> String.  An object is an abstract concept.  Each object contains data.  In addition, these sets of data have related methods that control how they are used.  We say that an object is an instance of a <code>class</code>.  It is a specific example of the <code>class</code>.  In the example above, String is general.  There are many Strings.  On the other hand, <code>firstName</code> refers to a specific String object, which has the value Harry.  Technically, <code>firstName</code> is not the object.  It is a pointer or reference variable that is assigned to an object.  For convenience, it is common to simply refer to the reference variable as an object.
</p>
<p>
	The statement above does several things in one line of code.  The example below does the same thing in two lines of code.  The first line creates a <code>new</code> variable of the type String.  The variable is a <code>null</code> pointer when created.  It is suitable to point to an object of the String class, but initially is not pointing to an object.  The second line creates a <code>new</code> String object, and assigns the object to the reference variable.  The variable is now pointing to the <code>new</code> String object.
</p>
<pre>
String firstName;
firstName = new String("Harry");</pre>
<p>
	A <code>new</code> object is created by calling a constructor.  A constructor is a special method that creates a new object and returns an object ID.  A constructor may require arguments, but always has the same name as the class.  The String constructor above requires a String.
</p>
<p>
	All objects are created in the same way.  The line below creates a <code>new</code> Scanner object.
</p>
<pre>
Scanner keyboard = new Scanner(System.in);</pre>
<p>
	There is a shorthand notation for creating a <code>new</code> String object.  A <code>new</code> String object can be created and assigned to a String variable using the assignment operator, just as if String were a primitive type.
</p>
<pre>
String word = "Enterprise";</pre>
<p>
	This line is interpreted by the compiler as:
</p>
<pre>
String word = new String("Enterprise");</pre>
<p>
	But this shortcut only works for Strings.
</p>

<h2 id="Methods">
	Methods
</h2>
<p>
	Classes contain methods.  Once we create an object of a <code>class</code>, we can call the methods from the <code>class</code> on the object.  For example, the <code>class</code> String contains a method called equals().  After creating a String object, we can call the equals() method on it.  We call a method on an object by following the reference variable with a period, and the method name.  The equals() method <code>returns</code> a value of <code>true</code> if the String argument (the String in the parentheses), equals the object the method is called on.  
</p>
<pre>
String s = "apples";
if( <strong>s.equals("apples")</strong> )
{
	System.out.println("Yum");
}</pre>
<p>
	In the example above, the String <code>s</code> is compared to the String <code>apples</code>, and the method <code>returns true</code>.  
</p>
<p>
	A class method has to be called "on an object".  That means the method name has to be preceded by a reference variable, and a period.  It doesn't make any sense to call the equals() method alone.
</p>
<pre>
equals("apples");  	<span style="color:red;">// Don't do this</span></pre>
<p>
	The equals() method <code>returns true</code> if some String is equal to apples, but which String?  Class methods must always be called on an object of the appropriate type.  In this case, equals() must be called on a String object so the computer knows which String to compare its argument to.
</p>
<p>
	Before calling a method on an object reference variable, the object must be created.  Otherwise the variable is a <code>null</code> pointer.  Attempting to call a method on a null pointer will cause a NullPointerException to be thrown and the program will exit.
</p>
<pre>
String s;
if(s.equals("apples"))	// NullPointerException</pre>

<h2 id="MethodDescriptions">
	Method Descriptions
</h2>
<p>
	A method description is a single line explanation.  It specifies how a method can be used.
</p>
<pre>
boolean equals(String otherString)</pre>
<p>
	This method description contains 3 pieces of information.
</p>
<ul>
	<li>The method <code>return</code> type</li>
	<li>The method name </li>
	<li>The method argument list</li>
</ul>
<p>
	All methods, except for constructors, have a <code>return</code> type.  The return type of a method is the type of value (int, double, String…) that will be sent back from the method when it is called.  The return type may be void, which indicates that the method does not return a value.  
</p>
<p>
	The argument list specifies what needs to go in the parentheses when a method is called.  Some methods do not require any arguments, like the Scanner nextInt() method.  Other methods require one or more arguments, like equals().  
</p>
<p>
	The argument list contains two pieces of information for each argument; the type of the argument, and a name explaining its function.  If the method requires multiple arguments, they are separated by commas.  The equals() method description specifies that to call equals(), you need to put one String in the parentheses.  The String was given the name otherString as a description, but you can use any String object (reference variable) or String constant.
</p>
<pre>
boolean 	equals   	(String otherString)
Return		Method		Argument
type 			name 			list</pre>
<p>
	Some methods have more than one version.  A method that has multiple versions is said to be overloaded.  For example, the String class has more than ten constructors.  They all have the same name, String().  Below are the method descriptions for three of the String constructors.
</p>
<pre>
String()
String(String original)
String(char[] letters)</pre>
<p>
	Note that no <code>return</code> type is given.  Constructors do not <code>return</code> a value and so they have no <code>return</code> type.  The first constructor creates a new empty String.  The second creates a new String containing the same character sequence as the String <code>original</code>.  The third constructor makes a new string containing the characters in the array <code>letters</code>.
</p>
<p>
	Overloaded methods always have the same name, but have different argument lists, and <code>return</code> types.
</p>

<h2 id="Scanner">
	Scanner (java.util.Scanner)
</h2>
<p>
	Objects of the Scanner class are used to read from various sources such as the keyboard, or a file.  Descriptions of some of the Scanner class methods are listed below.
</p>
<h3>
	Constructors
</h3>
<pre>
Scanner(File source)
Scanner(InputStream source)
Scanner(String source)</pre>
<h3>
	Other methods
</h3>
<pre>
String next()
boolean nextBoolean()
double nextDouble()
int nextInt()
String nextLine()</pre>
<p>
	Although three constructors are shown, we've always used the second one.  The object <code>System.in</code> is an object of the <code>class</code> InputStream.  However, we can see that a File or String can also be used to create a <code>new</code> Scanner.
</p>

<h2 id="Random">
	Random (java.util.Random)
</h2>
<p>
	The Random class is used to generate random numbers.  Its full name is java.util.Random, which must be imported.  Below are some of the methods contained in the Random class.
</p>
<h3>
	Constructor
</h3>
<pre>
Random()</pre>
<h3>
	Other methods
</h3>
<pre>
double nextDouble()
int nextInt(int values)</pre>
<p>
	The constructor requires no arguments, so to create a <code>new</code> random object:
</p>
<pre>
Random generator = new Random();</pre>
<p>
	Once we have an object of the Random class, we can call methods from the Random <code>class</code> on it. 
</p>
<h4>double nextDouble()</h4>
<p>
	The nextDouble() method randomly generates and <code>returns a double</code> between 0 and 1; including 0, but not including 1.  So, it generates a number between 0 and .9999…
</p>
<pre>
double randomNumber = generator.nextDouble();</pre>
<p>
	We can use the <code>returned</code> vale in mathematical expressions to obtain random numbers in a particular range.  The line below generates a number between 0 and 10 (0 to 9.9999…).
</p>
<pre>
double score = generator.nextDouble() * 10;</pre>
<h3>int nextInt(int values)</h3>
<p>
	The nextInt() method works differently.  It requires one argument, which specifies the number of values that can be generated.  The lowest possible value is always 0.  The highest possible value is one less than the argument <code>values</code>.  
<br/>For example, if the argument is 2, then 2 different values can be generated (0, and 1).  If 6 is used as an input argument, there are 6 possible <code>return</code> values (0, 1, 2, 3, 4, 5).
</p>
<pre>
int coinFlip = generator.nextInt(2);</pre>
<p>
	As is the case with random <code>doubles</code>, the <code>returned</code> value can be used in an expression.  The line below generates integers between 1 and 6.
</p>
<pre>
int dieRoll = generator.nextInt(6) + 1;</pre>
<p>
	The next line generates an integer between -5 and 5.
</p>
<pre>
int xCoordinate = generator.nextInt(11) - 5;</pre>
<p>
	This line generates even integers from 2 to 10.
</p>
<pre>
int even = generator.nextInt(5) * 2 + 2;</pre>
<p>
	The following example program creates an array that holds 5 <code>ints</code>.  A random number from 1 to 6 is generated for each element.  Then one of the three random numbers is given to the user.
</p>
<pre>
import java.util.Random;

public class DieRoller
{
	public static void main(String[] args)
	{
		Random generator = new Random();	// Number generator
		int[] die = new int[5];				// Five dice
		int playersIndex;					// Die the player gets
		int playersDie;						// Number on that die

		// Roll 5 dice
		System.out.println("Rolling 5 dice...");
		for(int i = 0; i < die.length; i++)
		{
			die[i] = generator.nextInt(6) + 1;
			System.out.println("Die " + (i + 1) + " is a " + die[i]);
		}

		// Randomly choose which of the 5 dice the player gets
		playersIndex  = generator.nextInt(5);
		System.out.println("\nPlayer gets die " + (playersIndex + 1));

		// Get the die roll from the array
		playersDie = die[playersIndex];
		System.out.println("You get a " + playersDie);
	}
}</pre>
<p style="text-align: center;"><%= image_tag "c8_p8.jpg"%></p>

<h2 id="StaticMethods">
	Static Methods
</h2>
<p>
	A <code>static</code> method is called on a <code>class</code> rather than on an object. Other methods must be called on objects because the methods use information contained in the object.  Creation of the object sets things up so methods can be called.  For example, the nextLine() method of the Scanner must be called on an object of the Scanner class, so the program knows whether to read from the keyboard, or a file.
</p>
<pre>
String line = nextLine();				<span style="color:red;">// Don't do this</span>

String line = keyboard.nextLine();	<span style="color:red;">// Do this</span></pre>
<p>
	However, there are times when a method does not need any information aside from its input arguments.  Suppose we want to take the square root of a number.  It makes sense to have a method that takes in a number and <code>returns</code> the solution without creating an object first.  
</p>
<p>
	The Math class (java.lang.Math) contains many <code>static</code> methods that perform mathematical operations, such as sqrt().  These methods do not require the creation of an object.  They are called on the class itself.  That means the name of the class precedes the period before the method name. 
</p>
<pre>
double root = <strong>Math.sqrt(25)</strong>;</pre>
<p>
	The Math.sqrt() method requires one argument of type double, and <code>returns</code> a double.  The method <code>returns</code> the square root of the argument.  Below is a method description for the Math.sqrt() method.
</p>
<pre>
static double Math.sqrt(double n)</pre>
<p>
	Static methods are usually utility methods that perform isolated number crunching and data manipulation.  Below is a listing of some of the <code>static</code> methods in the Math class.  Note that many of the methods are overridden.  For example, there are two versions of the abs() method; one that works with <code>ints</code>, and one that works with <code>doubles</code>.
</p>

<h2 id="Math">
	Math (java.lang.Math)
</h2>

<pre>static int Math.abs(int a)</pre>
<p>returns the absolute value of the argument a</p>

<pre>static double Math.abs(double a)</pre>
<p>returns the absolute value of the argument a</p>

<pre>static double Math.cos(double a)</pre>
<p>returns the cosine of the angle a</p>

<pre>static int Math.max(int a, int b)</pre>
<p>returns the greater of the two arguments</p>

<pre>static double Math.max(double a, double b)</pre>
<p>returns the greater of the two arguments</p>

<pre>static int Math.min(int a, int b)</pre>
<p>returns the smaller of the two arguments</p>

<pre>static double Math.min(double a, double b)</pre>
<p>returns the smaller of the two arguments</p>

<pre>static double Math.pow(double a, double b)</pre>
<p>returns the value of a raised to the power of b</p>

<pre>static double Math.rint(double a)</pre>
<p>returns the argument a rounded to the nearest integer, but as a double</p>

<pre>static double Math.sin(double a)</pre>
<p>returns the sine of the angle a</p>

<pre>static double Math.sqrt(double a)</pre>
<p>returns the positive square root of the argument a</p>

<pre>static double Math.tan(double a)</pre>
<p>returns the tangent of the angle a</p>

<h3 id="Arrays">
	Arrays (java.util.Arrays)
</h3>
<p>
	The Arrays <code>class</code> contains many <code>static</code> methods that manipulate arrays.  The methods are overloaded so that they work with many data types.  Some of the methods are listed below.
</p>
<pre>
static int Arrays.binarySearch(char[] a, char key)
static int Arrays.binarySearch(double[] a, double key)
static int Arrays.binarySearch(int[] a, int key)
static int Arrays.binarySearch(String[] a, String key)

static boolean Arrays.equals(boolean[] a1, boolean[] a2)
static boolean Arrays.equals(char[] a1, char[] a2)
static boolean Arrays.equals(double[] a1, double[] a2)
static boolean Arrays.equals(int[] a1, int[] a2)
static boolean Arrays.equals(String[] a1, String[] a2)

static void Arrays.fill(boolean[] a, boolean value)
static void Arrays.fill(char[] a, char value)
static void Arrays.fill(double[] a, double value)
static void Arrays.fill(int[] a, int value)
static void Arrays.fill(String[] a, String value)

static void Arrays.fill(boolean[] a, int from, int to, boolean value)
static void Arrays.fill(char[] a, int from, int to, char value)
static void Arrays.fill(double[] a, int from, int to, double value)
static void Arrays.fill(int[] a, int from, int to, int value)
static void Arrays.fill(String[] a, int from, int to, String value)

static void Arrays.sort(char[] a)
static void Arrays.sort(double[] a)
static void Arrays.sort(int[] a)
static void Arrays.sort(String[] a)</pre>

<br/>
<h4>int Arrays.binarySearch(int[] a, int key)</h4>
<p>
	The binarySearch() method returns the index of the argument key in the array a.  The array must be sorted before searching.  If the array has multiple matching values, any of their indices might be returned.  That is, this search algorithm is not guaranteed to find any particular element that matches.  
<br/>If no matching element can be found a negative number is returned.  The negative return value indicates the index where the key would be if it were in the array as –(position + 1).
</p>

<br/>
<h4>boolean Arrays.equals(int[] a1, int[] a2)</h4>
<p>
	The equals() method returns true if both arrays have the same number of elements, and they have the same values, in the same order.  That is, if all of the elements in <code>a1</code> are equal to the elements in <code>a2</code>.
</p>

<br/>
<h4>void Arrays.fill(int[] a, int value)</h4>
<p>
	The fill() method sets every element in the array to the value <code>value</code>.  The method does not return a new array.  It fills the existing array.
</p>

<br/>
<h4>void Arrays.fill(int[] a, int from, int to,int value)</h4>
<p>
	These versions of the fill() method fill only part of the array.  All of the elements from the index <code>from</code>, to but not including the index <code>to</code> are replaced by <code>value</code>.
</p>

<br/>
<h4>void Arrays.sort(int[] a)</h4>
<p>
	The sort() method sorts an array from smallest to largest.  All elements in the array are sorted, so the array should not have extra useless elements.  The method does not return a sorted array, it sorts the array <code>a</code>.
</p>

<br/>
<p>
	The following example program uses some of the static Arrays methods.
</p>
<p>
	The program creates a <code>new int</code> array with some values.
</p>
<pre>
int[] number = {7, 2, 9, 4, 1};	
</pre>
<br/>
<p>
	Then it sorts the array.
</p>
<pre>Arrays.sort(number);</pre>
<br/>
<p>Then it searches for the number 7. </p>
<pre>int index = Arrays.binarySearch(number, 7)</pre>
<br/>
<p>The returned index is used in the assignment statement so that the element containing 7 with be set to 5.</p>
<pre>number[index] = 5;</pre>
<br/>
<p>Finally, the array is filled with 3's.</p>
<pre>Arrays.fill(number, 3);</pre>
<pre>
import java.util.Arrays;

public class ArrayMethods
{
	public static void main(String[] args)
	{
		<strong>int[] number = {7, 2, 9, 4, 1};</strong>
		System.out.println("The original array.");
		for(int i = 0; i < number.length; i++)
		{
			System.out.print(number[i] + " ");
		}

		<strong>Arrays.sort(number);</strong>
		System.out.println("\nThe sorted array.");
		for(int i = 0; i < number.length; i++)
		{
			System.out.print(number[i] + " ");
		}

		int index = <strong>Arrays.binarySearch(number, 7);</strong>
		<strong>number[index] = 5;</strong>
		System.out.println("\nChange the 7 to a 5.");
		for(int i = 0; i < number.length; i++)
		{
			System.out.print(number[i] + " ");
		}

		<strong>Arrays.fill(number, 3);</strong>
		System.out.println("\nFill it with 3's.");
		for(int i = 0; i < number.length; i++)
		{
			System.out.print(number[i] + " ");
		}
	}
}</pre>
<p style="text-align: center;"><%= image_tag "c8_p13.jpg"%></p>

<h2 id="Integer">
	Integer (java.lang.Integer)
</h2>
<p>
	The Integer <code>class</code> is an example of what is called a wrapper <code>class</code>.  Although an integer is normally stored as a primitive <code>int</code> type, it can be stored as an object of the Integer <code>class</code>.  The Integer <code>class</code> has methods that can be called on an Integer object.  The integer class also contains some useful <code>static</code> methods.  In particular, the static parseInt() method takes a String argument, and returns an <code>int</code> containing the value represented by the String.
</p>
<pre>static int Integer.parseInt(String s)</pre>
<p>An example using the static Integer.parseInt() method is shown below.</p>
<pre>
String s = “23”;
int number;

number = Integer.parseInt(s);</pre>

<h2 id="Double">
	Double (java.lang.Double)
</h2>
<p>
	The Double <code>class</code> is a wrapper <code>class</code> for the double primitive type.  Like the Integer <code>class</code>, it contains both normal and <code>static</code> methods, including a <code>static</code> method that returns a double given the String representation of the double.
</p>
<pre>static double Double.parseDouble(String s)</pre>
<p>An example using the <code>static</code> Double.parseDouble() method is shown below.</p>
<pre>
String s = “3.14”;
double number;

number = Double.parseDouble(s);</pre>

<h2 id="Character">
	Character (java.lang.Character)
</h2>
<p>
	The Character <code>class</code> is a wrapper <code>class</code> for the char primitive type.  It contains both normal and <code>static</code> methods.
</p>
<pre>
static boolean isDigit(char c)
static boolean isLetter(char c)
static boolean isLetterOrDigit(char c)
static boolean isLowerCase(char c)
static boolean isUpperCase(char c)
static boolean isWhitespace(char c)</pre>

<h2 id="JOptionPane">
	JOptionPane (javax.swing.JOptionPane)
</h2>
<p>
	The JOptionPane <code>class</code> contains some static methods that can be used to create simple dialog boxes.  Two are shown below.
</p>
<pre>
JOptionPane.ShowInputDialog(Component parent, Object message)
JOptionPane.ShowMessageDialog(Component parent, Object message)</pre>
<p>
	The first argument can be set to <code>null</code>.  The second argument is the String you want to appear in the dialog box.  The message dialog simply displays a message.  The input dialog has a field for users to type in.  
</p>
<p>
	When the showInputDialog() method is called, the program blocks until the dialog box is closed.  Then the text in the field is returned as a String.  If another data type is desired, the <code>return</code> value must be parsed.
</p>
<p>
	The example below gets input from the user with input dialog boxes.  The returned values are parsed into <code>ints</code> using the Integer.parseInt() method.  The two values are added, and displayed using a message dialog box.
</p>
<pre>
import javax.swing.JOptionPane;

public class DialogBox
{
	public static void main(String[] args)
	{
		String input = "";
		int a = 0;
		int b = 0;
		int sum = 0;
		input = JOptionPane.showInputDialog(null, "Enter value A:");
		a = Integer.parseInt(input);
		input = JOptionPane.showInputDialog(null, "Enter value B:");
		b = Integer.parseInt(input);

		sum = a + b;
		JOptionPane.showMessageDialog(null, "The sum is " + sum);
	}
}</pre>
<p style="text-align: center;"><%= image_tag "c8_p15.jpg"%></p>

<h2 id="String">
	String (java.lang.String)
</h2>
<p>
	The String class is used to create and manipulate String objects, but it also contains static methods.   The format() method creates and returns a String object with data embedded in a specified way.   The formatting controls the spacing and placement of the values.  For example, a double can be formatted so that only two decimal places are showing.
</p>
<p>
	The format() method can have any number of arguments.  The first argument is always the format string.  The other arguments are the values that will be formatted.
</p>
<pre>static String format(String formatString, Object … args)</pre>
<p>
	The format string is a String that contains format specfiers.  Each format specifier starts with a percent sign (%) and ends with a letter as shown below.
</p>
<pre>
%s		String
%d		int
%f		double
%c		char</pre>
<p>
	For each format specifier, data must be placed as an argument after the format string.  The arguments must be in the same order and the proper types.
</p>
<pre>String s = String.format("%d%f", 3, 1.49);</pre>
<p>
	The String s now holds the value "31.490000".  The values used as arguments have been converted to Strings and joined.
</p>
<p>
	The format string can contain other characters.  The argument values are inserted into the text. 
</p>
<pre>String s = String.format("Item %d name %s price %f", 3, "gum", 1.49);</pre>
<p>
	A number within the format specifier indicates the minimum number of spaces the value will take up in the String.  If the value does not fill all the spaces, extra spaces are added to the left (the value is right aligned in the field).  
</p>
<p>
	If the number is negative, the extra spaces are added on the right (the value is left aligned in the field). 
</p>
<pre>String s = String.format("%5d%-5d%5d", 1, 2, 3);</pre>
<p>
	The line above will create a new string and convert and embed the three values.  Each value is placed in a field of five characters.  The first and third values are right aligned.  The second value is left aligned.
</p>
<p style="text-align: center;"><%= image_tag "c8_p17.jpg"%></p>
<p>
	For floating point values (doubles), a number may be placed after the decimal point (.) indicating the number of decimal places to show.  
</p>
<pre>String s = String.format("%5.2f", 3.14159);</pre>
<p>
	This creates the String " 3.14".  Note the leading space.  With two decimal places, the value requires 4 characters.  An additional space is added to make a 5 character field.  If the size of the field is too small, it is ignored.  The value takes up as many spaces as it needs.  The line below creates the String "3.14".  No spaces are added, but all four characters are retained.
</p>
<pre>String s = String.format("%3.2f", 3.14159);</pre>
<p>The code below prints a table.  Formatting is used to line up the values.</p>
<pre>
System.out.println("Item#  Product   Price");
System.out.println(String.format("%-7d%-8s%9.2f", 1, "gum", 1.49));
System.out.println(String.format("%-7d%-8s%9.2f", 2, "banana", 0.79));
System.out.println(String.format("%-7d%-8s%9.2f", 3, "milk", 4.29));
System.out.println(String.format("%-7d%-8s%9.2f", 4, "forklift", 9231.99));
System.out.println(String.format("%-7d%-8s%9.2f", 5, "jetpack", 1252.26));</pre>
<p style="text-align: center;"><%= image_tag "c8_p17_02.jpg"%></p>

<h2 id="Thread">
	Thread (java.lang.Thread)
</h2>
<p>
	The Thread class has a method called sleep() that makes the program pause for a certain amount of time.
</p>
<p><strong>static void Thread.sleep(int milliseconds)</strong></p>
<p>
	The only argument is the number of milliseconds for which the thread should sleep.  A value of 1000 milliseconds will cause a 1 second pause.
</p>
<p>
	The example below prints the String "Howdy!", one character at a time, with half-second pauses between characters.
</p>
<pre>
public class StepPrinter
{
	public static void main(String[] args) throws Exception
	{
		String message = "Howdy!";
		for(int i = 0; i < message.length(); i++)
		{
			System.out.print(message.charAt(i));
			Thread.sleep(500);
		}
	}
}</pre>
<p>
	There are some methods that might throw an Exception, and they know that they might throw an Exception.  This sort of Exception is called a checked Exception.  The sleep() method is such a method.  Since it might throw an Exception, our program has to be prepared to handle that possibility.  One way to do this is to declare that the main() method throws an Exception.
</p>
<pre>public static void main(String[] args) <strong>throws Exception</strong></pre>
<p>
	This addition says that if main() calls a method, and it throws an Exception, main() will throw the Exception and print an error message on the console.  If the main() method does not admit that it calls a method that might throw an Exception, the compiler will complain.
</p>
<pre>
StepPrinter.java:9: unreported exception java.lang.InterruptedException; must be caught or declared to be thrown
			Thread.sleep(500);
			            ^</pre>

<!-- ========Worksheet and AssignmentPrograms================= --> 
<div id="Worksheet10">
	<h3>Worksheet 10: <em>Static</em> Methods</h3>
	<ol>
		<li>What is returned by this method call?
			<div class="codeblock2">
double p = 9.0;
Math.sqrt(p);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
double d = 3.7;
Math.rint(d);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int a = 2;
int b = -7;
Math.min(b + 2, 2 – a);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int x = -5;
Math.abs(3 * x);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int x = 5;
int y = 9;
Math.max(y – 4, x + 2);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int a = -2;
int b = -7;
Math.min(Math.abs(a), Math.abs(b));
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
double c = -23;
Math.sqrt(Math.abs(c - 2)); 
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int[] a = {-6, 4, 7, 12, 15};
Arrays.binarySearch(a, 4);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
double[] b = {2.9, 5.3, 5.7, 6.2, 8.3};
double[] c = {6.2, 5.7, 5.3, 2.9, 8.3};
Arrays.equals(b, c);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int[] a = {7, 11, 14, 19, 23};
Arrays.binarySearch(a, 23);
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
double[] x = {1.3, 5.2, 6.1, 8.6, 3.9, 9.7};
Arrays.fill(x, 1, 3, 2.5);
Arrays.sort(x);
Arrays.binarySearch(x, 3.9)
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
int[] a = {4, 6, 7, 12, 15};
Arrays.binarySearch(a, Math.abs(-6));
			</div>
		</li>
		<li>What is returned by this method call?
			<div class="codeblock2">
double[] b = {2.9, 5.3, 5.7, 6.2, 8.7};
double x = 8.7;
Math.max(Arrays.binarySearch(b, x), 5);
			</div>
		</li>
	</ol>
</div>

<div id="AssignmentPrograms">
	<h3>Assignment Programs</h3>
	<br/>
	<h4>CoinFlip</h4>
	<p>
		This program asks the player to flip a coin.  The player chooses heads or tails, and the program tells the player if the guess was right or wrong.  The player is offered the opportunity to quit after each flip.
	</p>Sample Run
	<div class="codeblock2">
Let's flip some coins!!!

I flip it, you call it.
h for heads, t for tails.
<strong>h</strong>
Yes.  It was h
Play again? (y or n)
<strong>y</strong>

I flip it, you call it.
h for heads, t for tails.
<strong>h</strong>
No.  It was t
Play again? (y or n)
<strong>n</strong>
Press any key to continue . . .
	</div>
	<br/>
	<h4>GuessANumber</h4>
	<p>
		This program generates a random integer between 1 and 100, including 1 and 100.  It asks the user to guess the number.  The user gets 10 guesses.  After each guess, the program tells the user if the guess was too high or too low.  If the user finds the number within the 10 guesses, the user wins.
	</p>Sample Run
	<div class="codeblock2">
Okay, I’ve got a number.  What is your guess number 1?
<strong>50</strong>
Sorry, that’s too high.
What is your guess number 2?
<strong>25</strong>
Sorry, that’s too low.
What is your guess number 3?
<strong>42</strong>
Yes.  That is the answer.  You win!
	</div>
	<br/>
	<h4>QuadraticEquation</h4>
	<p>This program finds the solutions for second degree polynomials (quadratic equations).</p>
	<p>ax<sup>2</sup> + bx + c = 0</p>
	<p>In this equation, we know what a, b, and c are.  We wish to solve for x.</p>
	<p>The quadratic formula says:</p>
	<p style="text-align: center;"><%= image_tag "c8_p22.jpg"%></p>
	<p>
		The part under the square root symbol (b<sup>2</sup> - 4ac) is called the discriminant.  If this number is zero, the equation has one solution, which is printed by the program.  If the discriminant is greater than zero, there are two solutions, and the program prints both.  However, if the discriminant is negative, the program can not take the square root.  The user sees a message saying that the solutions are complex.
	</p>Sample Run
	<div class="codeblock2">
Please enter a:
<strong>1</strong>
Please enter b:
<strong>-3</strong>
Please enter c:
<strong>-4</strong>

The solutions are -1 and 4
	</div>
	<br/>
	<h4>RockPaperScissors</h4>
	<p>
		This game plays a game of rock paper scissors with you and keeps score.  For each turn, the player picks rock, paper, or scissors.  The computer randomly generates one of the three.  Scissors beat paper, rock beats scissors, and paper beats rock.  The last one is questionable, but that is how the game is played.  If the player and computer choose the same item, it's a tie.
	</p>Sample Run
	<div class="codeblock2">
Time for Rock Paper Scissors!!!

Ready?  Rock, Paper, Scissors, Shoot!
Enter rock(r), paper(p), or scissors(s): <strong>r</strong>
I picked s.  You win.
Your score is 1.
Play again? (y or n): <strong>y</strong>

Ready?  Rock, Paper, Scissors, Shoot!
Enter rock(r), paper(p), or scissors(s): <strong>p</strong>
I picked s.  I win.
Your score is 0.
Play again? (y or n): <strong>y</strong>

Ready?  Rock, Paper, Scissors, Shoot!
Enter rock(r), paper(p), or scissors(s): <strong>r</strong>
I picked r.  It's a tie.
Your score is 0.
Play again? (y or n): <strong>n</strong>

Press any key to continue . . .
	</div>
	<br/>
	<h4>SimpleDungeon</h4>
	<p>
		The player must take 10 steps to escape the dungeon.  On each step, the player might encounter a monster.  One third of the time, the player will encounter a gnome.  One third of the time, the player will encounter a dragon.  One third of the time, there will be no monster.
		<br/>If there is a monster, the player can choose to fight or run away.  If the player fights and wins, the player gets the monster's gold.
		<br/>The player starts with 10 hit points.  Each time the player is hit by a monster, the player loses hit points.  If the player's hit points reach 0 before escaping the dungeon, the game is over and the player loses.
		<br/>The player does 1 to 8 hit points of damage with each hit 
		<br/>Each gnome encountered starts with 3 hit points, has 1 to 5 gold, and does 1 to 2 hit points of damage each time it attacks..  
		<br/>Each dragon starts with 10 hit points, has 10 to 20 gold, and does 1 to 5 points of damage.
	</p>
	<p>
		Each encounter with a monster consists of a series of turns.  For each turn, the player can fight, or run away.  If the player chooses to fight, damage is calculated for the monster.  The monster retaliates and damage is calculated for the player.  Then, the next turn starts and the player may choose to fight or run away again.  If the player chooses to run away, they move one step closer to the dungeon exit without getting hurt, but without getting any gold.
	</p>
	<p>When the player escapes, the program displays the total gold collected. </p>
	<br/>
	<h4>Dungeon</h4>
	<p>
		The Dungeon game is full of monsters and fear, which leads to hate, which leads to anger, and gold…
		<br/>The player must take 5 to 10 steps (generated randomly) to escape the dungeon.  On each step, the player might encounter a monster.  One third of the time, the player will encounter a gnome.  One third of the time, the player will encounter a dragon.  One third of the time, there will be no monster.
		<br/>If there is a monster, the player can choose to fight or run away.  If the player fights and wins, the player gets the monster's gold.
		<br/>The player starts with 10 hit points.
		<br/>The player does 1 to 8 hit points of damage with each hit 
		<br/>Each gnome encountered starts with 2 to 4 hit points.  
		<br/>Each dragon starts with 8 to 12 hit points.
		<br/>The amount of gold a monster has varies between 0 and twice its original hit points.
		<br/>The amount of damage a monster does with each attack varies between 0 and half its starting hit points. 
	</p>Sample Run
	<div class="codeblock2">
Welcome to the dungeon.  
Keep moving and you might survive.

You are in a dark cave.
You have 10 hit points, and 0 gold.
What would you like to do?
move on (m) or sit here(s)
<strong>m</strong>
You have encountered a Dragon!
What would you like to do?
fight (f) or run away (r)
<strong>f</strong>
You did 4 points of damage to the Dragon
The Dragon did 3 points of damage to you.
What would you like to do?
fight (f) or run away (r)
<strong>f</strong>
You did 2 points of damage to the Dragon
The Dragon did 1 points of damage to you.
What would you like to do?
fight (f) or run away (r)
<strong>f</strong>
You did 5 points of damage to the Dragon
The Dragon did 1 points of damage to you.
You killed the Dragon and got 13 gold.

You are in a dark cave.
You have 5 hit points, and 13 gold.
What would you like to do?
move on (m) or sit here(s)
<strong>m</strong>
You have encountered a Gnome!
What would you like to do?
fight (f) or run away (r)
<strong>r</strong>


You are in a dark cave.
You have 5 hit points, and 13 gold.
What would you like to do?
move on (m) or sit here(s)

<strong>...</strong>

You are in a dark cave.
You have 5 hit points, and 13 gold.
What would you like to do?
move on (m) or sit here(s)
<strong>m</strong>


You've escaped the dungeon with 13 gold.
	</div>
</div>
