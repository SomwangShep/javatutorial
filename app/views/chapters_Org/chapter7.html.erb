<!-- ========================================================= -->	
	<table id="jumpTbl">
		<tr><td><a href="#ArrayInitialization">Array Initialization</a></td><td><a href="#SwappingElements">Swapping Elements</a></td><td><a href="#ThelengthParameterofArrays">The length Parameter of Arrays</a></td><td><a href="#UsingForLoopswithArrays">Using For Loops with Arrays</a></td><td><a href="#ApplicationsofArrays">Applications of Arrays</a></td></tr>
		<tr><td><a href="#Resizing">Resizing</a></td><td><a href="#Search">Search</a></td><td><a href="#FindMaximum">Find Maximum (or Minimum)</a></td><td><a href="#ComparingTwoArrays">Comparing Two Arrays</a></td><td><a href="#Sorting">Sorting</a></td></tr>
		<tr><td colspan="3"><a href="#Worksheet9">Worksheet 9: Array Manipulation</a></td><td colspan="2"><a href="#AssignmentPrograms">Assignment Programs</a></td></tr>
	</table>
<!-- ========================================================= -->	
  <h1> Chapter 7 - Arrays</h1>
  <p>
  	An array is a set of variables that are all of the same type.  Suppose we want a program to store three numbers entered by a user.  In the code below, three variables are created to hold the numbers.
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p1_01.jpg"%></p>
  <p>
  	Rather than create three separate variables, we could create an array that holds three doubles, and store the numbers in the array.
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p1_02.jpg"%></p>
  <p>
  	You can make an array of any type, including both primitive and <code>class</code> types.  To create an array, you need to know 3 things.
  </p>
  <p>
  	What type the array will hold (int, double, String…)<br/>
	What you would like to call the array<br/>
	How many elements the array will hold
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p1_03.jpg"%></p>
  <p>
  	The statement below creates an <code>int</code> array named stanley that can hold five <code>ints</code>.  The array <code>stanley</code> is a variable, and the variable type is <code>int[] (int array)</code>.
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p2_01.jpg"%></p>
  <p>
  	We refer to the items in the array as elements.  We access the elements of the array by using an index.  The index is an <code>int</code> that represents a particular element in the array.  The first element in every array is at index 0.  To access a particular element in an array, the index is placed in square brackets after the array name.  
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p2_02.jpg"%></p>
  <p>
  	Note that while <code>stanley</code> is an <code>int</code> array, <code>stanley[0]</code> is an <code>int</code>.  Each element of an array can be used in the same way as a variable.
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p2_03.jpg"%></p>
  <p>
  	Since <code>stanley</code> was created as a length 5 array, <code>stanley</code> can hold 5 elements.  
Notice that the highest index (4 in this case) is one less than the array length (5 in this case).  The element <code>stanley[5]</code> does not exist.  It is a common programming error to try to access a non-existent element.  If, at runtime, the program attempts to use a negative index, or an index that is greater than or equal to the array length, an ArrayIndexOutOfBounds exception will be thrown and the program will terminate.
  </p>
  <p>
  	In the example program below, the user is asked to enter three numbers.  The program adds the numbers and prints the sum.
  </p>
  <pre>
import java.util.Scanner;

public class Adder
{
	public static void main(String[] agrs)
	{
		Scanner keyboard = new Scanner(System.in);
		double[] number = new double[3];
		double sum = 0;

		System.out.println("Enter first number:");
		number[0] = keyboard.nextDouble();
		System.out.println("Enter second number:");
		number[1] = keyboard.nextDouble();
		System.out.println("Enter third number:");
		number[2] = keyboard.nextDouble();

		sum = number[0] + number[1] + number[2];
		System.out.println("The sum is " + sum);
	}
}</pre>
  <p style="text-align: center;"><%= image_tag "c7_p3.jpg"%></p>
  <p>
  	The values stored in an array must be of the proper type.  However the index value used to access an element of any array must be an integer.  An expression may be used as long as it reduces to an <code>int</code>.
  </p>
  <pre>
number[0]
number[i]
number[3 + x * (11 – y)]</pre>
  
  <h2 id="ArrayInitialization">
  	Array Initialization
  </h2>
  <p>
  	By default, all elements in an array are initialized to zero.
  </p>
  <p>
  	In the case of primitives, the zero value is interpreted as normal.
  </p>
  <table class="customers">
  	<tr><td>int</td><td>0</td></tr>
  	<tr><td>double</td><td>0.0</td></tr>
  	<tr><td>boolean</td><td>false</td></tr>
  	<tr><td>char</td><td>\0 (the ASCII null character)</td></tr>
  </table>
  <p>
  	In the case of an object variable, such as a String or Scanner, a value of 0 is called a null pointer, and it means the variable is not pointing to any object.  If you try to call a method on a variable that is a null pointer, a NullPointerException will be thrown and the program will exit.
  </p>
  <p>
  	An array can be created and initialized with a constant array in one statement.  A constant array is denoted with curly braces.  The elements are values (constants, variables, or expressions) of the proper type for the array separated by commas.  A new array variable can be initialized to the values in a constant array by using the assignment operator.  This creates a new array and copies the values into it.  An array can only be initialized in this way when the array variable is created.
  </p>
  <pre>
int[] array1 = {5, 7, 34, 18, 734};
double[] array2 = {5.4, 6.8, 4.386, 1};
boolean[] array3 = {true, true, true, false, true, false};
char[] array4 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'};
String[] array5 = {"Red", "Yellow", "Blue"};</pre>
  <p>
  	The array will be created with the same size as the constant array assigned to it.  For example, the first line creates an int array of length 5 to hold the 5 numbers in the constant array.  The last line creates a String array with a length of 3 to hold the Strings "Red", "Yellow", and "Blue".
  </p>
  <h2 id="SwappingElements">
  	Swapping Elements
  </h2>
  <p>
  	A common array task is swapping two elements.  That is, exchanging the locations of two elements.
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p5.jpg"%></p>
  <p>
  	The picture above shows the second element (index 1) swapped with the fourth element (index 3).  To swap the element values, we would like to do something like this:
  </p>
  <pre>
array[1] = array[3];  <span style="color:red;">//This won't work</span>
array[3] = array[1];</pre>
  <p>
  	But this will not work.  When the first line assigns the value at index 3 (14) to index 1, the old value at index 1 (26) is lost.  
  </p>
  <p>
  	As an analogy, suppose you have a glass full of red water and a glass full of blue water, and want to swap the contents of the glasses.  That is, you want to put the red water in the blue glass and vice-versa.  If you try to pour the red water into the blue glass, the blue water needs to be poured out.  You need an extra glass to hold the blue water temporarily until the red glass is empty.  Likewise, to swap array elements, we need to create a variable to hold one of the values temporarily.
  </p>
  <p>
  	Step 1: Put contents from first place into temp holder.<br/>
		Step 2: Put contents from second place into first place.<br/>
		Step 3: Put contents from temp holder into second place.
  </p>
  <p style="text-align: center;"><%= image_tag "c7_p5_02.jpg"%></p>
  <p>
  	The example code below creates and initializes an array, and swaps the elements at indices 1 and 3.
  </p>
  <pre>
int[] array = {3, 26, 8, 14, 49};
int temp = 0;

temp = array[1];
array[1] = array[3];
array[3] = temp;</pre>

<h2 id="ThelengthParameterofArrays">
	The length Parameter of Arrays
</h2>
<p>
	There are times when we want to know the length of an existing array.  The length of any array can be accessed by following the array name with a period and the word length.
</p>
<pre>
int[] smallArray = new int[8];
System.out.println("The length of the array is " + <strong>smallArray.length)</strong>;</pre>
<p style="text-align: center;"><%= image_tag "c7_p6.jpg"%></p>

<h2 id="UsingForLoopswithArrays">
	Using For Loops with Arrays
</h2>
<p>
	When dealing with arrays, there are often times we want to do the same thing to each element.  If we use the for loop variable as the array index, we can access all elements in order by writing the code to access one general element.
</p>
<p>
	For example, suppose we want to set all the elements in an array called "value" to 1.  Without using a loop, the code would look like this:
</p>
<pre>
value[0] = 1;
value[1] = 1;
value[2] = 1;
…</pre>
<p>
	This is obviously a problem if the array is large, or if we don't know the size of the array in advance.  But if we write a more general statement for the i<sup>th</sup> element, rather than for a specific element,
</p>
<pre>
value[i] = 1;</pre>
<p>
	we can put the statement inside a <code>for</code> loop, and the loop will set every element in the array.  
</p>
<pre>
for(i = 0; i < value.length; i++)
{
	value[i] = 1;
}</pre>
<p>
	As the example program below shows, for many array processing tasks, a <code>for</code> loop is used.
</p>
<h3>
	Example Program - ArrayMaker
</h3>
<p>
	This program creates an array of <code>ints</code>.  It prompts the user to enter the size of the array before creating it.  The program then uses a <code>for</code> loop to print each of the element default values.  It uses a second <code>for</code> loop to assign data to each element from the keyboard.  A third for <code>loop</code> is used to print the new element values.  Finally, the fourth for loop sums the values in the array.
</p>
<p style="text-align: center;"><%= image_tag "c7_p7.jpg"%></p>
<pre>
import java.util.Scanner;

public class ArrayMaker
{
	public static void main(String[] args)
	{
		Scanner keyboard = new Scanner(System.in);
		int input = 0;
		int total = 0;
		int i = 0;

		System.out.println("How big should the array be?");
		input = keyboard.nextInt();
		int[] value = new int[input];

		<strong>// Print default values
		for(i = 0; i < value.length; i++)</strong>
		{
			System.out.println("value " + i + " is " + value[i]);
		}

		<strong>// Assign new values
		for(i = 0; i < value.length; i++)</strong>
		{
			System.out.println("Enter new value " + i);
			value[i] = keyboard.nextInt();
		}

		<strong>// Print new values
		for(i = 0; i < value.length; i++)</strong>
		{
			System.out.println("value " + i + " is " + value[i]);
		}

		<strong>// Add all values and print sum
		for(i = 0; i < value.length; i++)</strong>
		{
			total = total + value[i];
		}
		System.out.println("The sum is " + total);
	}
}</pre>
<p>
	Notice that the program is written in a modular fashion.  Each code block performs one function, and sets up things for the next block.
</p>
<p>
	As with <code>while</code> loops, the flow diagram symbol for a <code>for</code> loop is a diamond.  When the loop condition is <code>true</code>, the program flow loops back to the diamond.  The diagram below depicts a summing algorithm.
</p>
<p style="text-align: center;"><%= image_tag "c7_p9.jpg"%></p>

<h2 id="ApplicationsofArrays">
	Applications of Arrays
</h2>
<p>
	Once again, most array processing can be done using a <code>for</code> loop to step through the elements.  As always, the examples below are not the only ways to solve each problem.
</p>
<p>
	 The code below calculates the sum of the elements in an array called <code>value</code>.  An <code>int</code> called <code>total</code> is created and initialized to 0.  Each pass through the loop, an element is added to the <code>total</code>, and the result is stored in <code>total</code>.  When the loop ends, the value of <code>total</code> is the sum of the array elements.  This value might be the program output, or it might be used in a following block of code.
</p>
<pre>
int total = 0;

for(i = 0; i < value.length; i++)
{
    total = total + value[i];
}</pre>

<h2 id="StoringData">
	Storing Data
</h2>
<p>
	When we don't know how many times a loop will repeat before the loop starts, a <code>while</code> loop is a better choice than a <code>for</code> loop.  Suppose we want a program to store an unknown number of values entered by a user.  To hold the values, we create an array that is larger than we will need.  We also need a variable to count the number of values entered.
</p>
<pre>
int[] value = new int[100];
Scanner input = new Scanner(System.in);

int userInput = -1;
int count = 0;

while(userInput != 0)
{
    System.out.println("Enter a value (0 to quit):");
    userInput = input.nextInt();
    if(userInput != 0)
    {
        value[count] = userInput;
        count++;
    }
}</pre>
<p style="text-align: center;"><%= image_tag "c7_p10.jpg"%></p>

<h2 id="Resizing">
	Resizing
</h2>
<p>
	Once an array has been created, its size can not change.  If we need to resize an array, we make a new array of the desired size, and copy the old array values into it.  We can then point our old reference variable to the new array if we like.  In the last example, we were left with a partially filled array.  Suppose we want to move our data to an array that is just the right length.  The code below creates a new array with a length of <code>count</code>.  A <code>for</code> loop is used to copy the values from the original array, <code>value</code>, to the new array, <code>valueB</code>.  Finally, the array pointed to by <code>valueB</code> is assigned to the variable <code>value</code>.  The result is that the array <code>value</code> now contains the same values, but has been resized to fit the data.
</p>
<pre>
int[] valueB = new int[count];

for(i = 0; i < count; i++)
{
    valueB[i] = value[i];
}

value = valueB;</pre>

<h2 id="Search">
	Search
</h2>
<p>
	To search an array for a particular item, loop through the array and compare each element to the value sought.  In the example below, a variable called <code>key</code> holds the value we are searching for.  Another variable called <code>index</code> is created and initialized to -1
</p>
<pre>
int key = 7;
int index = -1;

for(i = 0; i < value.length; i++)
{
    if(value[i] == key)
    {
        index = i;
    }
}</pre>
<p>
	If an element in the array has the same value as <code>key</code>, the index of that element is stored in <code>index</code>.  If the key is found again, <code>index</code> is set to the new index, so this algorithm finds the last index holding the key in the array.  If <code>index</code> is still -1 when the loop ends, the key was not found. 
</p>

<h2 id="FindMaximum">
	Find Maximum (or Minimum)
</h2>
<p>
	Suppose we want to find the maximum value contained in an array of <code>doubles</code> and its location within the array.  We could create one variable to hold the maximum value (a <code>double</code>), and another to hold its index (an <code>int</code>).  Before entering the loop, we do not know the maximum value, so we set our <code>max</code> variable to the first value in the array.  The <code>index</code> is initialized to 0 to match.  While looping through the array, we check every other element to see if it is greater than <code>max</code>.  If so, we store the new greatest value in <code>max</code>, and set <code>index</code> to the index containing it.
</p>
<pre>
double max = value[0];
int index = 0;

for(i = 1; i < value.length; i++)
{
    if(value[i] > max)
    {
        max = value[i];
        index = i;
    }
}</pre>
<p>
	When the loop ends, <code>max</code> and <code>index</code> are equal to the largest value in the array and its index.  The smallest value in an array can be found in a similar way.
</p>
<p style="text-align: center;"><%= image_tag "c7_p12.jpg"%></p>

<h2 id="ComparingTwoArrays">
	Comparing Two Arrays
</h2>
<p>
	Suppose we have two arrays, a1 and a2.  The following line of code looks like it might compare the two arrays for equality.
</p>
<pre>
if(a2 == a1)	<span style="color:red;">// Does not work</span></pre>
<p>
	It does not.  It compares the two pointers.  Like Strings, arrays are objects, and this comparison will be true only if both array variables point to the same arrays.
</p>
<p>
	To compare the contents of two different arrays, we must compare the elements separately.  In the example below, a <code>boolean</code> called <code>equal</code> is initialized to <code>true</code>.  As the elements are looped through, if any pair does not match, <code>equal</code> is set to <code>false</code>.  
</p>
<pre>
boolean equal = true;
for(i = 0; i < a1.length; i++)
{
    if(a1[i] != a2[i])
    {
        equal = false;
    }
}</pre>
<p>
	Keep in mind that this code would not work to compare two String arrays.  Strings must be compared using the equals() method.
</p>
<pre>
if(!a1[i].equals(a2[i]))</pre>
<p style="text-align: center;"><%= image_tag "c7_p13.jpg"%></p>

<h2 id="Sorting">
	Sorting
</h2>
<p>
	There are many sorting algorithms, each with different advantages and disadvantages.  The algorithm described here is normally called a selection sort.  
</p>
<p>
	The idea is to sort the data by putting the largest value in the first array element, the second largest value in the next element and so forth.  Using a <code>for</code> loop, we can sort one value for each iteration of the loop.  The first few iterations are explained in words below.
</p>
<pre>
Go through all array elements to find the maximum.
Swap maximum with element 0.

Go through all array elements except 0 to find the maximum.
Swap maximum with element 1.

Go through all array elements except 0 and 1 to find the maximum.
Swap maximum with element 2.</pre>
<p>
	The illustration below shows a 4 element array being sorted in 3 iterations of a loop.  The last element is always automatically sorted when all the other elements are in place.
</p>
<p style="text-align: center;"><%= image_tag "c7_p14.jpg"%></p>
<p>
	Within each iteration of the <code>for</code> loop, we need to find a maximum value.  This means we need another <code>for</code> loop nested inside the first.  The inner loop finds the maximum value from those remaining to be sorted.  The outer loop puts that maximum value where it should go, and runs the inner loop once for each array element (aside from the last).
</p>
<pre>
for(i = 0; i < data.length-1; i++)
{
	// Reset max and index of max
	max = data[i];
	index = i;

	// Search for max
	for(j = i+1; j < data.length; j++)
	{
		if(data[j] > max)
		{
  			max = data[j];
  			index = j;
		}
	}

	// Swap max with element i
	temp = data[i];
	data[i] = max;
	data[index] = temp;
}</pre>
<p style="text-align: center;"><%= image_tag "c7_p15.jpg"%></p>  	

<!-- ========Worksheet and AssignmentPrograms================= --> 

<div id="Worksheet9">
	<h3>Worksheet 9: Array Manipulation</h3>
	<ol>
		<li>Write a line of code that creates a new array of booleans called "flag".  The array will hold 52 values.</li>
		<li>Write the code to initialize the values of flag to true.</li>
		<li>Write a line of code that creates a new array of ints called "number".  The array will hold 23 values.</li>
		<li>Write the code to initialize the values of number to the odd numbers, starting with 1.</li>
		<li>Write the code to swap the 5<sup>th</sup> element with the 7<sup>th</sup> element in an array of doubles called "stuff".</li>
		<li>Write the code to swap all odd elements with the even elements in a String array called "billygoat".  The array has an even number of elements.  Swap the first with the second, and the third with the fourth, and so on.</li>
		<li>Write the code to find the largest value in an array of doubles called "charlie".</li>
		<li>Write the code to find the smallest value in an array of ints called "stan".</li>
		<li>Write the code to sum all the elements in an array of ints called "doris".</li>
		<li>Write the code to find the first index where the element is equal to false in an array of booleans called "switch".</li>
		<li>Write the code to search an array of doubles called "data", for the number x.  The code prints the first index where x is found, or a message saying it isn't in there.</li>
		<li>Write the code to copy all of the elements in the String array "name" to the string array "student".</li>
		<li>Write the code to copy all of the elements in the double array "a" to the double array "b".</li>
		<li>Write the code to sort the int array "count" from lowest to highest.</li>
		<li>Write the code to sort the double array "price" from highest to lowest.</li>
		<li>Write the code to count the number of elements in the boolean array "waffle" that are true.</li>
	</ol>
	
	
	
	
	
</div>

<div id="AssignmentPrograms">
	<h3>Assignment Programs</h3>
	<br/>
	<h4>Stats</h4>
	<p>
		This program allows a user to enter any number of doubles.  The user types in zero to stop entering numbers.  The program then finds the largest, and smallest numbers entered, calculates the sum and average, and prints all the numbers from lowest to highest.
	</p>Sample Run:
	<div class = "codeblock2">
Please enter number 1:
<strong>3.4</strong>
Please enter number 2:
<strong>8.2</strong>
Please enter number 3:
<strong>7</strong>
Please enter number 4:
<strong>1.9</strong>
Please enter number 5:
<strong>6.8</strong>
Please enter number 6:
<strong>0</strong>

The smallest number entered was 1.9
The largest number entered was 8.2
The sum of all numbers is 27.3
The average of the numbers is 5.46
1.9
3.4
6.8
7
8.2
	</div>
	
	<br/>
	<h4>Cash Register</h4>
	<p>
		This program asks the user to enter prices for items.  The user enters a price of 0 to stop.  The program then prints a receipt including a list of items bought arranged from least to most expensive, a subtotal, and a total that includes 5% tax.
	</p>Sample Run:
	<div class = "codeblock2">
Welcome to J-Mart.
Enter price for item 1: <strong>5</strong>
Enter price for item 2: <strong>3.99</strong>
Enter price for item 3: <strong>4.25</strong>
Enter price for item 4: <strong>0</strong>

Your order contains the following items:
3.99
4.25
5.0

Subtotal: 13.24

Adding 5% tax…

Total: 13.902
	</div>
	
	<br/>
	<h4>Fancy Register</h4>
	<p>
		Write a program that asks the user for the name price and quantity of an unknown number of items.  The program accepts input until the user enters a price of "done".  The program applies a 7% fancy tax and prints a receipt sorted in ascending order by price.
	</p>Sample Run:
	<div class = "codeblock2">
Enter name of item 1:<strong>Cheese </strong>
Enter price of item 1:<strong>5.00</strong>
Enter quantity of item 1:<strong>1</strong>

Enter name of item 2:<strong>Toothbrush</strong>
Enter price of item 2:<strong>1.95</strong>
Enter quantity of item 2:<strong>2</strong>

Enter name of item 3:<strong>done</strong>

Your order includes:

2 Toothbrush for 1.95 each
1 Cheese for 5.00 each

Your total with tax is 9.52
	</div>
	
</div>
